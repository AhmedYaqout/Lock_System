
locksecurity.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  00002bd8  00002c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000e8  008000e8  00002cf4  2**0
                  ALLOC
  3 .stab         000029c4  00000000  00000000  00002cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cce  00000000  00000000  000056b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006386  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000064c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006636  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000827f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000916a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009f18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a305  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aad3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ee       	ldi	r26, 0xE8	; 232
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3e       	cpi	r26, 0xEC	; 236
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 12 12 	call	0x2424	; 0x2424 <main>
      8a:	0c 94 ea 15 	jmp	0x2bd4	; 0x2bd4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ed       	ldi	r26, 0xD2	; 210
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 ed       	ldi	r24, 0xD2	; 210
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidInit>:
/********************************************/
/**!Comment : initialization function which */
/**           Define pins Direction for Dio */
/********************************************/
void DIO_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	DDRA =conc(DIO_u8PINDIR_7 ,DIO_u8PINDIR_6,DIO_u8PINDIR_5,DIO_u8PINDIR_4,DIO_u8PINDIR_3,DIO_u8PINDIR_2,DIO_u8PINDIR_1,DIO_u8PINDIR_0);
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f e0       	ldi	r24, 0x0F	; 15
     b54:	80 83       	st	Z, r24
	DDRB =conc(DIO_u8PINDIR_15 ,DIO_u8PINDIR_14,DIO_u8PINDIR_13,DIO_u8PINDIR_12,DIO_u8PINDIR_11,DIO_u8PINDIR_10,DIO_u8PINDIR_9,DIO_u8PINDIR_8);
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	80 83       	st	Z, r24
	DDRC =conc(DIO_u8PINDIR_23 ,DIO_u8PINDIR_22,DIO_u8PINDIR_21,DIO_u8PINDIR_20,DIO_u8PINDIR_19,DIO_u8PINDIR_18,DIO_u8PINDIR_17,DIO_u8PINDIR_16);
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	80 83       	st	Z, r24
	DDRD =conc(DIO_u8PINDIR_31 ,DIO_u8PINDIR_30,DIO_u8PINDIR_29,DIO_u8PINDIR_28,DIO_u8PINDIR_27,DIO_u8PINDIR_26,DIO_u8PINDIR_25,DIO_u8PINDIR_24);
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	80 83       	st	Z, r24
	
	
}
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <DIO_enuSetPinValue>:

tenuErrorStatus  DIO_enuSetPinValue(u8 u8PinNbCpy ,u8 u8PinValueCpy )
{
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	00 d0       	rcall	.+0      	; 0xb7a <DIO_enuSetPinValue+0x6>
     b7a:	0f 92       	push	r0
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	8a 83       	std	Y+2, r24	; 0x02
     b82:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnLoc = OK ;
     b84:	19 82       	std	Y+1, r1	; 0x01
	
	if (u8PinNbCpy <= DIO_u8_PIN_7)
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	88 30       	cpi	r24, 0x08	; 8
     b8a:	60 f5       	brcc	.+88     	; 0xbe4 <DIO_enuSetPinValue+0x70>
	{
		if (u8PinValueCpy == DIO_u8HIGH )
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	a1 f4       	brne	.+40     	; 0xbba <DIO_enuSetPinValue+0x46>
		{
			SET_BIT(PORTA , u8PinNbCpy);
     b92:	ab e3       	ldi	r26, 0x3B	; 59
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	eb e3       	ldi	r30, 0x3B	; 59
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	48 2f       	mov	r20, r24
     b9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ba0:	28 2f       	mov	r18, r24
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	02 2e       	mov	r0, r18
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <DIO_enuSetPinValue+0x3c>
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	0a 94       	dec	r0
     bb2:	e2 f7       	brpl	.-8      	; 0xbac <DIO_enuSetPinValue+0x38>
     bb4:	84 2b       	or	r24, r20
     bb6:	8c 93       	st	X, r24
     bb8:	b6 c0       	rjmp	.+364    	; 0xd26 <DIO_enuSetPinValue+0x1b2>
			
		}else
		{
			CLR_BIT(PORTA , u8PinNbCpy);
     bba:	ab e3       	ldi	r26, 0x3B	; 59
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	eb e3       	ldi	r30, 0x3B	; 59
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	48 2f       	mov	r20, r24
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	28 2f       	mov	r18, r24
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	02 2e       	mov	r0, r18
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <DIO_enuSetPinValue+0x64>
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	0a 94       	dec	r0
     bda:	e2 f7       	brpl	.-8      	; 0xbd4 <DIO_enuSetPinValue+0x60>
     bdc:	80 95       	com	r24
     bde:	84 23       	and	r24, r20
     be0:	8c 93       	st	X, r24
     be2:	a1 c0       	rjmp	.+322    	; 0xd26 <DIO_enuSetPinValue+0x1b2>
		}
		
	}else if (u8PinNbCpy >=DIO_u8_PIN_8 && u8PinNbCpy <=DIO_u8_PIN_15 )
     be4:	8a 81       	ldd	r24, Y+2	; 0x02
     be6:	88 30       	cpi	r24, 0x08	; 8
     be8:	90 f1       	brcs	.+100    	; 0xc4e <DIO_enuSetPinValue+0xda>
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	80 31       	cpi	r24, 0x10	; 16
     bee:	78 f5       	brcc	.+94     	; 0xc4e <DIO_enuSetPinValue+0xda>
	{
		u8PinNbCpy = u8PinNbCpy % DIO_u8_PIN_8 ; 
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	87 70       	andi	r24, 0x07	; 7
     bf4:	8a 83       	std	Y+2, r24	; 0x02
		
		if (u8PinValueCpy == DIO_u8HIGH )
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	a1 f4       	brne	.+40     	; 0xc24 <DIO_enuSetPinValue+0xb0>
		{
			SET_BIT(PORTB , u8PinNbCpy);
     bfc:	a8 e3       	ldi	r26, 0x38	; 56
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e8 e3       	ldi	r30, 0x38	; 56
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	48 2f       	mov	r20, r24
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 2e       	mov	r0, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <DIO_enuSetPinValue+0xa6>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <DIO_enuSetPinValue+0xa2>
     c1e:	84 2b       	or	r24, r20
     c20:	8c 93       	st	X, r24
     c22:	81 c0       	rjmp	.+258    	; 0xd26 <DIO_enuSetPinValue+0x1b2>
			
		}else
		{
			CLR_BIT(PORTB , u8PinNbCpy);
     c24:	a8 e3       	ldi	r26, 0x38	; 56
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e8 e3       	ldi	r30, 0x38	; 56
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	48 2f       	mov	r20, r24
     c30:	8a 81       	ldd	r24, Y+2	; 0x02
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 2e       	mov	r0, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <DIO_enuSetPinValue+0xce>
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	0a 94       	dec	r0
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <DIO_enuSetPinValue+0xca>
     c46:	80 95       	com	r24
     c48:	84 23       	and	r24, r20
     c4a:	8c 93       	st	X, r24
     c4c:	6c c0       	rjmp	.+216    	; 0xd26 <DIO_enuSetPinValue+0x1b2>
		}
	}else if(u8PinNbCpy >=DIO_u8_PIN_16 && u8PinNbCpy <=DIO_u8_PIN_23 )
     c4e:	8a 81       	ldd	r24, Y+2	; 0x02
     c50:	80 31       	cpi	r24, 0x10	; 16
     c52:	90 f1       	brcs	.+100    	; 0xcb8 <DIO_enuSetPinValue+0x144>
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	88 31       	cpi	r24, 0x18	; 24
     c58:	78 f5       	brcc	.+94     	; 0xcb8 <DIO_enuSetPinValue+0x144>
	{
		
		u8PinNbCpy = u8PinNbCpy % DIO_u8_PIN_8 ; 
     c5a:	8a 81       	ldd	r24, Y+2	; 0x02
     c5c:	87 70       	andi	r24, 0x07	; 7
     c5e:	8a 83       	std	Y+2, r24	; 0x02
		
		if (u8PinValueCpy == DIO_u8HIGH )
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	a1 f4       	brne	.+40     	; 0xc8e <DIO_enuSetPinValue+0x11a>
		{
			
			SET_BIT(PORTC , u8PinNbCpy);
     c66:	a5 e3       	ldi	r26, 0x35	; 53
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e5 e3       	ldi	r30, 0x35	; 53
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	48 2f       	mov	r20, r24
     c72:	8a 81       	ldd	r24, Y+2	; 0x02
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	02 2e       	mov	r0, r18
     c7e:	02 c0       	rjmp	.+4      	; 0xc84 <DIO_enuSetPinValue+0x110>
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	0a 94       	dec	r0
     c86:	e2 f7       	brpl	.-8      	; 0xc80 <DIO_enuSetPinValue+0x10c>
     c88:	84 2b       	or	r24, r20
     c8a:	8c 93       	st	X, r24
     c8c:	4c c0       	rjmp	.+152    	; 0xd26 <DIO_enuSetPinValue+0x1b2>
			
		}else
		{

			CLR_BIT(PORTC , u8PinNbCpy);			
     c8e:	a5 e3       	ldi	r26, 0x35	; 53
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e5 e3       	ldi	r30, 0x35	; 53
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_enuSetPinValue+0x138>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_enuSetPinValue+0x134>
     cb0:	80 95       	com	r24
     cb2:	84 23       	and	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	37 c0       	rjmp	.+110    	; 0xd26 <DIO_enuSetPinValue+0x1b2>
		}
	}else if (u8PinNbCpy >=DIO_u8_PIN_24 && u8PinNbCpy <=DIO_u8_PIN_31 )
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	88 31       	cpi	r24, 0x18	; 24
     cbc:	90 f1       	brcs	.+100    	; 0xd22 <DIO_enuSetPinValue+0x1ae>
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	80 32       	cpi	r24, 0x20	; 32
     cc2:	78 f5       	brcc	.+94     	; 0xd22 <DIO_enuSetPinValue+0x1ae>
	{
		u8PinNbCpy = u8PinNbCpy % DIO_u8_PIN_8 ; 
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	87 70       	andi	r24, 0x07	; 7
     cc8:	8a 83       	std	Y+2, r24	; 0x02
		
		if (u8PinValueCpy == DIO_u8HIGH )
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	81 30       	cpi	r24, 0x01	; 1
     cce:	a1 f4       	brne	.+40     	; 0xcf8 <DIO_enuSetPinValue+0x184>
		{
			
			SET_BIT(PORTD , u8PinNbCpy);
     cd0:	a2 e3       	ldi	r26, 0x32	; 50
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e2 e3       	ldi	r30, 0x32	; 50
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	48 2f       	mov	r20, r24
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	02 2e       	mov	r0, r18
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <DIO_enuSetPinValue+0x17a>
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	0a 94       	dec	r0
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <DIO_enuSetPinValue+0x176>
     cf2:	84 2b       	or	r24, r20
     cf4:	8c 93       	st	X, r24
     cf6:	17 c0       	rjmp	.+46     	; 0xd26 <DIO_enuSetPinValue+0x1b2>
			
		}else
		{

			CLR_BIT(PORTD , u8PinNbCpy);			
     cf8:	a2 e3       	ldi	r26, 0x32	; 50
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e2 e3       	ldi	r30, 0x32	; 50
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	48 2f       	mov	r20, r24
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	02 2e       	mov	r0, r18
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <DIO_enuSetPinValue+0x1a2>
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	0a 94       	dec	r0
     d18:	e2 f7       	brpl	.-8      	; 0xd12 <DIO_enuSetPinValue+0x19e>
     d1a:	80 95       	com	r24
     d1c:	84 23       	and	r24, r20
     d1e:	8c 93       	st	X, r24
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <DIO_enuSetPinValue+0x1b2>
		}
	}else 
	{
		enuReturnLoc = INDEX_OUT_OF_RANGE ;
     d22:	83 e0       	ldi	r24, 0x03	; 3
     d24:	89 83       	std	Y+1, r24	; 0x01
	}

return enuReturnLoc ; 
     d26:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <DIO_enuGetPinValue>:

tenuErrorStatus DIO_enuGetPinValue(u8 u8PinNbCpy, u8 * pu8PinValueCpy)
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	00 d0       	rcall	.+0      	; 0xd3a <DIO_enuGetPinValue+0x6>
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <DIO_enuGetPinValue+0x8>
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	8a 83       	std	Y+2, r24	; 0x02
     d42:	7c 83       	std	Y+4, r23	; 0x04
     d44:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnLoc = OK ;
     d46:	19 82       	std	Y+1, r1	; 0x01
	
	if (u8PinNbCpy <= DIO_u8_PIN_7)
     d48:	8a 81       	ldd	r24, Y+2	; 0x02
     d4a:	88 30       	cpi	r24, 0x08	; 8
     d4c:	a0 f4       	brcc	.+40     	; 0xd76 <DIO_enuGetPinValue+0x42>
	{
		*pu8PinValueCpy = GET_BIT(PINA , u8PinNbCpy );
     d4e:	e9 e3       	ldi	r30, 0x39	; 57
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	88 2f       	mov	r24, r24
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	a9 01       	movw	r20, r18
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <DIO_enuGetPinValue+0x32>
     d62:	55 95       	asr	r21
     d64:	47 95       	ror	r20
     d66:	8a 95       	dec	r24
     d68:	e2 f7       	brpl	.-8      	; 0xd62 <DIO_enuGetPinValue+0x2e>
     d6a:	ca 01       	movw	r24, r20
     d6c:	81 70       	andi	r24, 0x01	; 1
     d6e:	eb 81       	ldd	r30, Y+3	; 0x03
     d70:	fc 81       	ldd	r31, Y+4	; 0x04
     d72:	80 83       	st	Z, r24
     d74:	59 c0       	rjmp	.+178    	; 0xe28 <DIO_enuGetPinValue+0xf4>
		
	}else if (u8PinNbCpy >=DIO_u8_PIN_8 && u8PinNbCpy <=DIO_u8_PIN_15 )
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	88 30       	cpi	r24, 0x08	; 8
     d7a:	d0 f0       	brcs	.+52     	; 0xdb0 <DIO_enuGetPinValue+0x7c>
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	80 31       	cpi	r24, 0x10	; 16
     d80:	b8 f4       	brcc	.+46     	; 0xdb0 <DIO_enuGetPinValue+0x7c>
	{
		u8PinNbCpy = u8PinNbCpy % DIO_u8_PIN_8 ; 
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	87 70       	andi	r24, 0x07	; 7
     d86:	8a 83       	std	Y+2, r24	; 0x02
		
		*pu8PinValueCpy = GET_BIT(PINB , u8PinNbCpy );
     d88:	e6 e3       	ldi	r30, 0x36	; 54
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	a9 01       	movw	r20, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <DIO_enuGetPinValue+0x6c>
     d9c:	55 95       	asr	r21
     d9e:	47 95       	ror	r20
     da0:	8a 95       	dec	r24
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <DIO_enuGetPinValue+0x68>
     da4:	ca 01       	movw	r24, r20
     da6:	81 70       	andi	r24, 0x01	; 1
     da8:	eb 81       	ldd	r30, Y+3	; 0x03
     daa:	fc 81       	ldd	r31, Y+4	; 0x04
     dac:	80 83       	st	Z, r24
     dae:	3c c0       	rjmp	.+120    	; 0xe28 <DIO_enuGetPinValue+0xf4>
		
	}else if(u8PinNbCpy >=DIO_u8_PIN_16 && u8PinNbCpy <=DIO_u8_PIN_23 )
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	80 31       	cpi	r24, 0x10	; 16
     db4:	d0 f0       	brcs	.+52     	; 0xdea <DIO_enuGetPinValue+0xb6>
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	88 31       	cpi	r24, 0x18	; 24
     dba:	b8 f4       	brcc	.+46     	; 0xdea <DIO_enuGetPinValue+0xb6>
	{
		
		u8PinNbCpy = u8PinNbCpy % DIO_u8_PIN_8 ; 
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	87 70       	andi	r24, 0x07	; 7
     dc0:	8a 83       	std	Y+2, r24	; 0x02
		
		*pu8PinValueCpy = GET_BIT(PINC , u8PinNbCpy );
     dc2:	e3 e3       	ldi	r30, 0x33	; 51
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	88 2f       	mov	r24, r24
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	a9 01       	movw	r20, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <DIO_enuGetPinValue+0xa6>
     dd6:	55 95       	asr	r21
     dd8:	47 95       	ror	r20
     dda:	8a 95       	dec	r24
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <DIO_enuGetPinValue+0xa2>
     dde:	ca 01       	movw	r24, r20
     de0:	81 70       	andi	r24, 0x01	; 1
     de2:	eb 81       	ldd	r30, Y+3	; 0x03
     de4:	fc 81       	ldd	r31, Y+4	; 0x04
     de6:	80 83       	st	Z, r24
     de8:	1f c0       	rjmp	.+62     	; 0xe28 <DIO_enuGetPinValue+0xf4>
		
	}else if (u8PinNbCpy >=DIO_u8_PIN_24 && u8PinNbCpy <=DIO_u8_PIN_31 )
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	88 31       	cpi	r24, 0x18	; 24
     dee:	d0 f0       	brcs	.+52     	; 0xe24 <DIO_enuGetPinValue+0xf0>
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	80 32       	cpi	r24, 0x20	; 32
     df4:	b8 f4       	brcc	.+46     	; 0xe24 <DIO_enuGetPinValue+0xf0>
	{
		u8PinNbCpy = u8PinNbCpy % DIO_u8_PIN_8 ; 
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	87 70       	andi	r24, 0x07	; 7
     dfa:	8a 83       	std	Y+2, r24	; 0x02
		
		*pu8PinValueCpy = GET_BIT(PIND , u8PinNbCpy );
     dfc:	e0 e3       	ldi	r30, 0x30	; 48
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	88 2f       	mov	r24, r24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	a9 01       	movw	r20, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_enuGetPinValue+0xe0>
     e10:	55 95       	asr	r21
     e12:	47 95       	ror	r20
     e14:	8a 95       	dec	r24
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_enuGetPinValue+0xdc>
     e18:	ca 01       	movw	r24, r20
     e1a:	81 70       	andi	r24, 0x01	; 1
     e1c:	eb 81       	ldd	r30, Y+3	; 0x03
     e1e:	fc 81       	ldd	r31, Y+4	; 0x04
     e20:	80 83       	st	Z, r24
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_enuGetPinValue+0xf4>
		
	}else 
	{
		enuReturnLoc = INDEX_OUT_OF_RANGE ;
     e24:	83 e0       	ldi	r24, 0x03	; 3
     e26:	89 83       	std	Y+1, r24	; 0x01
	}

return enuReturnLoc ; 
     e28:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <DIO_enuSetPullUp>:



tenuErrorStatus DIO_enuSetPullUp(u8 u8PinNCpy , u8 u8PullupStatusCpy )
{
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <DIO_enuSetPullUp+0x6>
     e3e:	0f 92       	push	r0
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	8a 83       	std	Y+2, r24	; 0x02
     e46:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnLoc = OK ;
     e48:	19 82       	std	Y+1, r1	; 0x01
	
	if (u8PullupStatusCpy == PULLUP_ACTIVE)
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	31 f4       	brne	.+12     	; 0xe5c <DIO_enuSetPullUp+0x24>
	{
		enuReturnLoc = DIO_enuSetPinValue(u8PinNCpy , DIO_u8HIGH);
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	61 e0       	ldi	r22, 0x01	; 1
     e54:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
     e58:	89 83       	std	Y+1, r24	; 0x01
     e5a:	05 c0       	rjmp	.+10     	; 0xe66 <DIO_enuSetPullUp+0x2e>
	}
	else
	{
		enuReturnLoc = DIO_enuSetPinValue(u8PinNCpy , DIO_u8LOW);
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
     e64:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuReturnLoc ;
     e66:	89 81       	ldd	r24, Y+1	; 0x01
}
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <KEY_voidInit>:




void KEY_voidInit(void)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
	/**!Comment : Activate Pullup Resistor for Input Pins*/
	DIO_enuSetPinValue(KEY_u8INPUT_0 ,DIO_u8HIGH);
     e7c:	84 e0       	ldi	r24, 0x04	; 4
     e7e:	61 e0       	ldi	r22, 0x01	; 1
     e80:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEY_u8INPUT_1 ,DIO_u8HIGH);
     e84:	85 e0       	ldi	r24, 0x05	; 5
     e86:	61 e0       	ldi	r22, 0x01	; 1
     e88:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEY_u8INPUT_2 ,DIO_u8HIGH);
     e8c:	86 e0       	ldi	r24, 0x06	; 6
     e8e:	61 e0       	ldi	r22, 0x01	; 1
     e90:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEY_u8INPUT_3 ,DIO_u8HIGH);
     e94:	87 e0       	ldi	r24, 0x07	; 7
     e96:	61 e0       	ldi	r22, 0x01	; 1
     e98:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	
}
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <KEY_u8GetPressedKey>:

u8 KEY_u8GetPressedKey(void)
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <KEY_u8GetPressedKey+0x6>
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
	u8 u8TempLoc ;
	u8 u8ReturnLoc = 0xFF;
     eac:	8f ef       	ldi	r24, 0xFF	; 255
     eae:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinValue(KEY_u8OUTPUT_0 ,DIO_u8LOW );
     eb0:	83 e0       	ldi	r24, 0x03	; 3
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEY_u8OUTPUT_1 ,DIO_u8HIGH);
     eb8:	82 e0       	ldi	r24, 0x02	; 2
     eba:	61 e0       	ldi	r22, 0x01	; 1
     ebc:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEY_u8OUTPUT_2 ,DIO_u8HIGH);
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	61 e0       	ldi	r22, 0x01	; 1
     ec4:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEY_u8OUTPUT_3 ,DIO_u8HIGH);
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>

	DIO_enuGetPinValue(KEY_u8INPUT_0,&u8TempLoc);
     ed0:	9e 01       	movw	r18, r28
     ed2:	2e 5f       	subi	r18, 0xFE	; 254
     ed4:	3f 4f       	sbci	r19, 0xFF	; 255
     ed6:	84 e0       	ldi	r24, 0x04	; 4
     ed8:	b9 01       	movw	r22, r18
     eda:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuGetPinValue>
	if(u8TempLoc == 0)
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	88 23       	and	r24, r24
     ee2:	11 f4       	brne	.+4      	; 0xee8 <KEY_u8GetPressedKey+0x46>
	{
		u8ReturnLoc = BUTTON_0 ;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_enuGetPinValue(KEY_u8INPUT_1,&u8TempLoc);
     ee8:	9e 01       	movw	r18, r28
     eea:	2e 5f       	subi	r18, 0xFE	; 254
     eec:	3f 4f       	sbci	r19, 0xFF	; 255
     eee:	85 e0       	ldi	r24, 0x05	; 5
     ef0:	b9 01       	movw	r22, r18
     ef2:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuGetPinValue>
	if(u8TempLoc == 0)
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	88 23       	and	r24, r24
     efa:	11 f4       	brne	.+4      	; 0xf00 <KEY_u8GetPressedKey+0x5e>
	{
		u8ReturnLoc = BUTTON_4 ;
     efc:	84 e0       	ldi	r24, 0x04	; 4
     efe:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_enuGetPinValue(KEY_u8INPUT_2,&u8TempLoc);
     f00:	9e 01       	movw	r18, r28
     f02:	2e 5f       	subi	r18, 0xFE	; 254
     f04:	3f 4f       	sbci	r19, 0xFF	; 255
     f06:	86 e0       	ldi	r24, 0x06	; 6
     f08:	b9 01       	movw	r22, r18
     f0a:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuGetPinValue>
	if(u8TempLoc == 0)
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	88 23       	and	r24, r24
     f12:	11 f4       	brne	.+4      	; 0xf18 <KEY_u8GetPressedKey+0x76>
	{
		u8ReturnLoc = BUTTON_8 ;
     f14:	87 e0       	ldi	r24, 0x07	; 7
     f16:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_enuGetPinValue(KEY_u8INPUT_3,&u8TempLoc);
     f18:	9e 01       	movw	r18, r28
     f1a:	2e 5f       	subi	r18, 0xFE	; 254
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	87 e0       	ldi	r24, 0x07	; 7
     f20:	b9 01       	movw	r22, r18
     f22:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuGetPinValue>
	if(u8TempLoc == 0)
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	88 23       	and	r24, r24
     f2a:	11 f4       	brne	.+4      	; 0xf30 <KEY_u8GetPressedKey+0x8e>
	{
		u8ReturnLoc = BUTTON_12 ;
     f2c:	8f e2       	ldi	r24, 0x2F	; 47
     f2e:	89 83       	std	Y+1, r24	; 0x01
	}
	/******************************************/
	/************** SEQ 2 *********************/
   if (u8ReturnLoc == 0xFF)
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	8f 3f       	cpi	r24, 0xFF	; 255
     f34:	09 f0       	breq	.+2      	; 0xf38 <KEY_u8GetPressedKey+0x96>
     f36:	3f c0       	rjmp	.+126    	; 0xfb6 <KEY_u8GetPressedKey+0x114>
   {
	DIO_enuSetPinValue(KEY_u8OUTPUT_0 ,DIO_u8HIGH);
     f38:	83 e0       	ldi	r24, 0x03	; 3
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEY_u8OUTPUT_1 ,DIO_u8LOW );
     f40:	82 e0       	ldi	r24, 0x02	; 2
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEY_u8OUTPUT_2 ,DIO_u8HIGH);
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	61 e0       	ldi	r22, 0x01	; 1
     f4c:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEY_u8OUTPUT_3 ,DIO_u8HIGH);
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	61 e0       	ldi	r22, 0x01	; 1
     f54:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>

	DIO_enuGetPinValue(KEY_u8INPUT_0,&u8TempLoc);
     f58:	9e 01       	movw	r18, r28
     f5a:	2e 5f       	subi	r18, 0xFE	; 254
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	84 e0       	ldi	r24, 0x04	; 4
     f60:	b9 01       	movw	r22, r18
     f62:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuGetPinValue>
	if(u8TempLoc == 0)
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	88 23       	and	r24, r24
     f6a:	11 f4       	brne	.+4      	; 0xf70 <KEY_u8GetPressedKey+0xce>
	{
		u8ReturnLoc = BUTTON_1 ;
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_enuGetPinValue(KEY_u8INPUT_1,&u8TempLoc);
     f70:	9e 01       	movw	r18, r28
     f72:	2e 5f       	subi	r18, 0xFE	; 254
     f74:	3f 4f       	sbci	r19, 0xFF	; 255
     f76:	85 e0       	ldi	r24, 0x05	; 5
     f78:	b9 01       	movw	r22, r18
     f7a:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuGetPinValue>
	if(u8TempLoc == 0)
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	88 23       	and	r24, r24
     f82:	11 f4       	brne	.+4      	; 0xf88 <KEY_u8GetPressedKey+0xe6>
	{
		u8ReturnLoc = BUTTON_5 ;
     f84:	85 e0       	ldi	r24, 0x05	; 5
     f86:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_enuGetPinValue(KEY_u8INPUT_2,&u8TempLoc);
     f88:	9e 01       	movw	r18, r28
     f8a:	2e 5f       	subi	r18, 0xFE	; 254
     f8c:	3f 4f       	sbci	r19, 0xFF	; 255
     f8e:	86 e0       	ldi	r24, 0x06	; 6
     f90:	b9 01       	movw	r22, r18
     f92:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuGetPinValue>
	if(u8TempLoc == 0)
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	88 23       	and	r24, r24
     f9a:	11 f4       	brne	.+4      	; 0xfa0 <KEY_u8GetPressedKey+0xfe>
	{
		u8ReturnLoc = BUTTON_9 ;
     f9c:	88 e0       	ldi	r24, 0x08	; 8
     f9e:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_enuGetPinValue(KEY_u8INPUT_3,&u8TempLoc);
     fa0:	9e 01       	movw	r18, r28
     fa2:	2e 5f       	subi	r18, 0xFE	; 254
     fa4:	3f 4f       	sbci	r19, 0xFF	; 255
     fa6:	87 e0       	ldi	r24, 0x07	; 7
     fa8:	b9 01       	movw	r22, r18
     faa:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuGetPinValue>
	if(u8TempLoc == 0)
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	88 23       	and	r24, r24
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <KEY_u8GetPressedKey+0x114>
	{
		u8ReturnLoc = BUTTON_13 ;
     fb4:	19 82       	std	Y+1, r1	; 0x01
	}
	   
   }
/******************************************/
	/************** SEQ 3 *********************/
   if (u8ReturnLoc == 0xFF)
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	8f 3f       	cpi	r24, 0xFF	; 255
     fba:	09 f0       	breq	.+2      	; 0xfbe <KEY_u8GetPressedKey+0x11c>
     fbc:	40 c0       	rjmp	.+128    	; 0x103e <KEY_u8GetPressedKey+0x19c>
   {
	DIO_enuSetPinValue(KEY_u8OUTPUT_0 ,DIO_u8HIGH);
     fbe:	83 e0       	ldi	r24, 0x03	; 3
     fc0:	61 e0       	ldi	r22, 0x01	; 1
     fc2:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEY_u8OUTPUT_1 ,DIO_u8HIGH );
     fc6:	82 e0       	ldi	r24, 0x02	; 2
     fc8:	61 e0       	ldi	r22, 0x01	; 1
     fca:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEY_u8OUTPUT_2 ,DIO_u8LOW);
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEY_u8OUTPUT_3 ,DIO_u8HIGH);
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	61 e0       	ldi	r22, 0x01	; 1
     fda:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>

	DIO_enuGetPinValue(KEY_u8INPUT_0,&u8TempLoc);
     fde:	9e 01       	movw	r18, r28
     fe0:	2e 5f       	subi	r18, 0xFE	; 254
     fe2:	3f 4f       	sbci	r19, 0xFF	; 255
     fe4:	84 e0       	ldi	r24, 0x04	; 4
     fe6:	b9 01       	movw	r22, r18
     fe8:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuGetPinValue>
	if(u8TempLoc == 0)
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	88 23       	and	r24, r24
     ff0:	11 f4       	brne	.+4      	; 0xff6 <KEY_u8GetPressedKey+0x154>
	{
		u8ReturnLoc = BUTTON_2 ;
     ff2:	83 e0       	ldi	r24, 0x03	; 3
     ff4:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_enuGetPinValue(KEY_u8INPUT_1,&u8TempLoc);
     ff6:	9e 01       	movw	r18, r28
     ff8:	2e 5f       	subi	r18, 0xFE	; 254
     ffa:	3f 4f       	sbci	r19, 0xFF	; 255
     ffc:	85 e0       	ldi	r24, 0x05	; 5
     ffe:	b9 01       	movw	r22, r18
    1000:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuGetPinValue>
	if(u8TempLoc == 0)
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	88 23       	and	r24, r24
    1008:	11 f4       	brne	.+4      	; 0x100e <KEY_u8GetPressedKey+0x16c>
	{
		u8ReturnLoc = BUTTON_6 ;
    100a:	86 e0       	ldi	r24, 0x06	; 6
    100c:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_enuGetPinValue(KEY_u8INPUT_2,&u8TempLoc);
    100e:	9e 01       	movw	r18, r28
    1010:	2e 5f       	subi	r18, 0xFE	; 254
    1012:	3f 4f       	sbci	r19, 0xFF	; 255
    1014:	86 e0       	ldi	r24, 0x06	; 6
    1016:	b9 01       	movw	r22, r18
    1018:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuGetPinValue>
	if(u8TempLoc == 0)
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	88 23       	and	r24, r24
    1020:	11 f4       	brne	.+4      	; 0x1026 <KEY_u8GetPressedKey+0x184>
	{
		u8ReturnLoc = BUTTON_10 ;
    1022:	89 e0       	ldi	r24, 0x09	; 9
    1024:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_enuGetPinValue(KEY_u8INPUT_3,&u8TempLoc);
    1026:	9e 01       	movw	r18, r28
    1028:	2e 5f       	subi	r18, 0xFE	; 254
    102a:	3f 4f       	sbci	r19, 0xFF	; 255
    102c:	87 e0       	ldi	r24, 0x07	; 7
    102e:	b9 01       	movw	r22, r18
    1030:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuGetPinValue>
	if(u8TempLoc == 0)
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	88 23       	and	r24, r24
    1038:	11 f4       	brne	.+4      	; 0x103e <KEY_u8GetPressedKey+0x19c>
	{
		u8ReturnLoc = BUTTON_14 ;
    103a:	8c e4       	ldi	r24, 0x4C	; 76
    103c:	89 83       	std	Y+1, r24	; 0x01
	}
	   
   }
   /******************************************/
	/************** SEQ 4 *********************/
   if (u8ReturnLoc == 0xFF)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	8f 3f       	cpi	r24, 0xFF	; 255
    1042:	09 f0       	breq	.+2      	; 0x1046 <KEY_u8GetPressedKey+0x1a4>
    1044:	40 c0       	rjmp	.+128    	; 0x10c6 <KEY_u8GetPressedKey+0x224>
   {
	DIO_enuSetPinValue(KEY_u8OUTPUT_0 ,DIO_u8HIGH);
    1046:	83 e0       	ldi	r24, 0x03	; 3
    1048:	61 e0       	ldi	r22, 0x01	; 1
    104a:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEY_u8OUTPUT_1 ,DIO_u8HIGH );
    104e:	82 e0       	ldi	r24, 0x02	; 2
    1050:	61 e0       	ldi	r22, 0x01	; 1
    1052:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEY_u8OUTPUT_2 ,DIO_u8HIGH);
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	61 e0       	ldi	r22, 0x01	; 1
    105a:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KEY_u8OUTPUT_3 ,DIO_u8LOW);
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>

	DIO_enuGetPinValue(KEY_u8INPUT_0,&u8TempLoc);
    1066:	9e 01       	movw	r18, r28
    1068:	2e 5f       	subi	r18, 0xFE	; 254
    106a:	3f 4f       	sbci	r19, 0xFF	; 255
    106c:	84 e0       	ldi	r24, 0x04	; 4
    106e:	b9 01       	movw	r22, r18
    1070:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuGetPinValue>
	if(u8TempLoc == 0)
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	88 23       	and	r24, r24
    1078:	11 f4       	brne	.+4      	; 0x107e <KEY_u8GetPressedKey+0x1dc>
	{
		u8ReturnLoc = BUTTON_3 ;
    107a:	83 e4       	ldi	r24, 0x43	; 67
    107c:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_enuGetPinValue(KEY_u8INPUT_1,&u8TempLoc);
    107e:	9e 01       	movw	r18, r28
    1080:	2e 5f       	subi	r18, 0xFE	; 254
    1082:	3f 4f       	sbci	r19, 0xFF	; 255
    1084:	85 e0       	ldi	r24, 0x05	; 5
    1086:	b9 01       	movw	r22, r18
    1088:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuGetPinValue>
	if(u8TempLoc == 0)
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	88 23       	and	r24, r24
    1090:	11 f4       	brne	.+4      	; 0x1096 <KEY_u8GetPressedKey+0x1f4>
	{
		u8ReturnLoc = BUTTON_7 ;
    1092:	8d e2       	ldi	r24, 0x2D	; 45
    1094:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_enuGetPinValue(KEY_u8INPUT_2,&u8TempLoc);
    1096:	9e 01       	movw	r18, r28
    1098:	2e 5f       	subi	r18, 0xFE	; 254
    109a:	3f 4f       	sbci	r19, 0xFF	; 255
    109c:	86 e0       	ldi	r24, 0x06	; 6
    109e:	b9 01       	movw	r22, r18
    10a0:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuGetPinValue>
	if(u8TempLoc == 0)
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	88 23       	and	r24, r24
    10a8:	11 f4       	brne	.+4      	; 0x10ae <KEY_u8GetPressedKey+0x20c>
	{
		u8ReturnLoc = BUTTON_11 ;
    10aa:	8a e2       	ldi	r24, 0x2A	; 42
    10ac:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_enuGetPinValue(KEY_u8INPUT_3,&u8TempLoc);
    10ae:	9e 01       	movw	r18, r28
    10b0:	2e 5f       	subi	r18, 0xFE	; 254
    10b2:	3f 4f       	sbci	r19, 0xFF	; 255
    10b4:	87 e0       	ldi	r24, 0x07	; 7
    10b6:	b9 01       	movw	r22, r18
    10b8:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuGetPinValue>
	if(u8TempLoc == 0)
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	88 23       	and	r24, r24
    10c0:	11 f4       	brne	.+4      	; 0x10c6 <KEY_u8GetPressedKey+0x224>
	{
		u8ReturnLoc = BUTTON_15 ;
    10c2:	85 e4       	ldi	r24, 0x45	; 69
    10c4:	89 83       	std	Y+1, r24	; 0x01
	}
	   
   }

return u8ReturnLoc ;
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
	

}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <LCD_voidInit>:
#define EIGHTBITS2LINE5X8DOTS	0x38
#define SHIFTDISPLAYLEFT 	0x0c
#define CLEARDISPLAY		0x01
#define MOVECURSORLEFT		0x06

void LCD_voidInit(void){
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	c6 54       	subi	r28, 0x46	; 70
    10e0:	d0 40       	sbci	r29, 0x00	; 0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	fe 01       	movw	r30, r28
    10ee:	ed 5b       	subi	r30, 0xBD	; 189
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	a0 ef       	ldi	r26, 0xF0	; 240
    10f8:	b1 e4       	ldi	r27, 0x41	; 65
    10fa:	80 83       	st	Z, r24
    10fc:	91 83       	std	Z+1, r25	; 0x01
    10fe:	a2 83       	std	Z+2, r26	; 0x02
    1100:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1102:	8e 01       	movw	r16, r28
    1104:	01 5c       	subi	r16, 0xC1	; 193
    1106:	1f 4f       	sbci	r17, 0xFF	; 255
    1108:	fe 01       	movw	r30, r28
    110a:	ed 5b       	subi	r30, 0xBD	; 189
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	60 81       	ld	r22, Z
    1110:	71 81       	ldd	r23, Z+1	; 0x01
    1112:	82 81       	ldd	r24, Z+2	; 0x02
    1114:	93 81       	ldd	r25, Z+3	; 0x03
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	4a ef       	ldi	r20, 0xFA	; 250
    111c:	54 e4       	ldi	r21, 0x44	; 68
    111e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	f8 01       	movw	r30, r16
    1128:	80 83       	st	Z, r24
    112a:	91 83       	std	Z+1, r25	; 0x01
    112c:	a2 83       	std	Z+2, r26	; 0x02
    112e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1130:	fe 01       	movw	r30, r28
    1132:	ff 96       	adiw	r30, 0x3f	; 63
    1134:	60 81       	ld	r22, Z
    1136:	71 81       	ldd	r23, Z+1	; 0x01
    1138:	82 81       	ldd	r24, Z+2	; 0x02
    113a:	93 81       	ldd	r25, Z+3	; 0x03
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e8       	ldi	r20, 0x80	; 128
    1142:	5f e3       	ldi	r21, 0x3F	; 63
    1144:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1148:	88 23       	and	r24, r24
    114a:	2c f4       	brge	.+10     	; 0x1156 <LCD_voidInit+0x84>
		__ticks = 1;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	9e af       	std	Y+62, r25	; 0x3e
    1152:	8d af       	std	Y+61, r24	; 0x3d
    1154:	46 c0       	rjmp	.+140    	; 0x11e2 <LCD_voidInit+0x110>
	else if (__tmp > 65535)
    1156:	fe 01       	movw	r30, r28
    1158:	ff 96       	adiw	r30, 0x3f	; 63
    115a:	60 81       	ld	r22, Z
    115c:	71 81       	ldd	r23, Z+1	; 0x01
    115e:	82 81       	ldd	r24, Z+2	; 0x02
    1160:	93 81       	ldd	r25, Z+3	; 0x03
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	3f ef       	ldi	r19, 0xFF	; 255
    1166:	4f e7       	ldi	r20, 0x7F	; 127
    1168:	57 e4       	ldi	r21, 0x47	; 71
    116a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    116e:	18 16       	cp	r1, r24
    1170:	64 f5       	brge	.+88     	; 0x11ca <LCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1172:	fe 01       	movw	r30, r28
    1174:	ed 5b       	subi	r30, 0xBD	; 189
    1176:	ff 4f       	sbci	r31, 0xFF	; 255
    1178:	60 81       	ld	r22, Z
    117a:	71 81       	ldd	r23, Z+1	; 0x01
    117c:	82 81       	ldd	r24, Z+2	; 0x02
    117e:	93 81       	ldd	r25, Z+3	; 0x03
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e2       	ldi	r20, 0x20	; 32
    1186:	51 e4       	ldi	r21, 0x41	; 65
    1188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	bc 01       	movw	r22, r24
    1192:	cd 01       	movw	r24, r26
    1194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	9e af       	std	Y+62, r25	; 0x3e
    119e:	8d af       	std	Y+61, r24	; 0x3d
    11a0:	0f c0       	rjmp	.+30     	; 0x11c0 <LCD_voidInit+0xee>
    11a2:	88 ec       	ldi	r24, 0xC8	; 200
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	9c af       	std	Y+60, r25	; 0x3c
    11a8:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    11ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	f1 f7       	brne	.-4      	; 0x11ae <LCD_voidInit+0xdc>
    11b2:	9c af       	std	Y+60, r25	; 0x3c
    11b4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    11b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	9e af       	std	Y+62, r25	; 0x3e
    11be:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    11c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	69 f7       	brne	.-38     	; 0x11a2 <LCD_voidInit+0xd0>
    11c8:	16 c0       	rjmp	.+44     	; 0x11f6 <LCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ca:	fe 01       	movw	r30, r28
    11cc:	ff 96       	adiw	r30, 0x3f	; 63
    11ce:	60 81       	ld	r22, Z
    11d0:	71 81       	ldd	r23, Z+1	; 0x01
    11d2:	82 81       	ldd	r24, Z+2	; 0x02
    11d4:	93 81       	ldd	r25, Z+3	; 0x03
    11d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22
    11de:	9e af       	std	Y+62, r25	; 0x3e
    11e0:	8d af       	std	Y+61, r24	; 0x3d
    11e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    11e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    11e6:	9a af       	std	Y+58, r25	; 0x3a
    11e8:	89 af       	std	Y+57, r24	; 0x39
    11ea:	89 ad       	ldd	r24, Y+57	; 0x39
    11ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	f1 f7       	brne	.-4      	; 0x11ee <LCD_voidInit+0x11c>
    11f2:	9a af       	std	Y+58, r25	; 0x3a
    11f4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(30);
	LCD_voidSendCmd(0x38);
    11f6:	88 e3       	ldi	r24, 0x38	; 56
    11f8:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <LCD_voidSendCmd>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a0 e8       	ldi	r26, 0x80	; 128
    1202:	bf e3       	ldi	r27, 0x3F	; 63
    1204:	8d ab       	std	Y+53, r24	; 0x35
    1206:	9e ab       	std	Y+54, r25	; 0x36
    1208:	af ab       	std	Y+55, r26	; 0x37
    120a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120c:	6d a9       	ldd	r22, Y+53	; 0x35
    120e:	7e a9       	ldd	r23, Y+54	; 0x36
    1210:	8f a9       	ldd	r24, Y+55	; 0x37
    1212:	98 ad       	ldd	r25, Y+56	; 0x38
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	4a ef       	ldi	r20, 0xFA	; 250
    121a:	54 e4       	ldi	r21, 0x44	; 68
    121c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	89 ab       	std	Y+49, r24	; 0x31
    1226:	9a ab       	std	Y+50, r25	; 0x32
    1228:	ab ab       	std	Y+51, r26	; 0x33
    122a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    122c:	69 a9       	ldd	r22, Y+49	; 0x31
    122e:	7a a9       	ldd	r23, Y+50	; 0x32
    1230:	8b a9       	ldd	r24, Y+51	; 0x33
    1232:	9c a9       	ldd	r25, Y+52	; 0x34
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e8       	ldi	r20, 0x80	; 128
    123a:	5f e3       	ldi	r21, 0x3F	; 63
    123c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1240:	88 23       	and	r24, r24
    1242:	2c f4       	brge	.+10     	; 0x124e <LCD_voidInit+0x17c>
		__ticks = 1;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	98 ab       	std	Y+48, r25	; 0x30
    124a:	8f a7       	std	Y+47, r24	; 0x2f
    124c:	3f c0       	rjmp	.+126    	; 0x12cc <LCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    124e:	69 a9       	ldd	r22, Y+49	; 0x31
    1250:	7a a9       	ldd	r23, Y+50	; 0x32
    1252:	8b a9       	ldd	r24, Y+51	; 0x33
    1254:	9c a9       	ldd	r25, Y+52	; 0x34
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	4f e7       	ldi	r20, 0x7F	; 127
    125c:	57 e4       	ldi	r21, 0x47	; 71
    125e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1262:	18 16       	cp	r1, r24
    1264:	4c f5       	brge	.+82     	; 0x12b8 <LCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1266:	6d a9       	ldd	r22, Y+53	; 0x35
    1268:	7e a9       	ldd	r23, Y+54	; 0x36
    126a:	8f a9       	ldd	r24, Y+55	; 0x37
    126c:	98 ad       	ldd	r25, Y+56	; 0x38
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e2       	ldi	r20, 0x20	; 32
    1274:	51 e4       	ldi	r21, 0x41	; 65
    1276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	bc 01       	movw	r22, r24
    1280:	cd 01       	movw	r24, r26
    1282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	98 ab       	std	Y+48, r25	; 0x30
    128c:	8f a7       	std	Y+47, r24	; 0x2f
    128e:	0f c0       	rjmp	.+30     	; 0x12ae <LCD_voidInit+0x1dc>
    1290:	88 ec       	ldi	r24, 0xC8	; 200
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	9e a7       	std	Y+46, r25	; 0x2e
    1296:	8d a7       	std	Y+45, r24	; 0x2d
    1298:	8d a5       	ldd	r24, Y+45	; 0x2d
    129a:	9e a5       	ldd	r25, Y+46	; 0x2e
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <LCD_voidInit+0x1ca>
    12a0:	9e a7       	std	Y+46, r25	; 0x2e
    12a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    12a6:	98 a9       	ldd	r25, Y+48	; 0x30
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	98 ab       	std	Y+48, r25	; 0x30
    12ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    12b0:	98 a9       	ldd	r25, Y+48	; 0x30
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	69 f7       	brne	.-38     	; 0x1290 <LCD_voidInit+0x1be>
    12b6:	14 c0       	rjmp	.+40     	; 0x12e0 <LCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b8:	69 a9       	ldd	r22, Y+49	; 0x31
    12ba:	7a a9       	ldd	r23, Y+50	; 0x32
    12bc:	8b a9       	ldd	r24, Y+51	; 0x33
    12be:	9c a9       	ldd	r25, Y+52	; 0x34
    12c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	98 ab       	std	Y+48, r25	; 0x30
    12ca:	8f a7       	std	Y+47, r24	; 0x2f
    12cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    12ce:	98 a9       	ldd	r25, Y+48	; 0x30
    12d0:	9c a7       	std	Y+44, r25	; 0x2c
    12d2:	8b a7       	std	Y+43, r24	; 0x2b
    12d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    12d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	f1 f7       	brne	.-4      	; 0x12d8 <LCD_voidInit+0x206>
    12dc:	9c a7       	std	Y+44, r25	; 0x2c
    12de:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_voidSendCmd(0x0c);
    12e0:	8c e0       	ldi	r24, 0x0C	; 12
    12e2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <LCD_voidSendCmd>
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	a0 e8       	ldi	r26, 0x80	; 128
    12ec:	bf e3       	ldi	r27, 0x3F	; 63
    12ee:	8f a3       	std	Y+39, r24	; 0x27
    12f0:	98 a7       	std	Y+40, r25	; 0x28
    12f2:	a9 a7       	std	Y+41, r26	; 0x29
    12f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f6:	6f a1       	ldd	r22, Y+39	; 0x27
    12f8:	78 a5       	ldd	r23, Y+40	; 0x28
    12fa:	89 a5       	ldd	r24, Y+41	; 0x29
    12fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	4a ef       	ldi	r20, 0xFA	; 250
    1304:	54 e4       	ldi	r21, 0x44	; 68
    1306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	8b a3       	std	Y+35, r24	; 0x23
    1310:	9c a3       	std	Y+36, r25	; 0x24
    1312:	ad a3       	std	Y+37, r26	; 0x25
    1314:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1316:	6b a1       	ldd	r22, Y+35	; 0x23
    1318:	7c a1       	ldd	r23, Y+36	; 0x24
    131a:	8d a1       	ldd	r24, Y+37	; 0x25
    131c:	9e a1       	ldd	r25, Y+38	; 0x26
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e8       	ldi	r20, 0x80	; 128
    1324:	5f e3       	ldi	r21, 0x3F	; 63
    1326:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    132a:	88 23       	and	r24, r24
    132c:	2c f4       	brge	.+10     	; 0x1338 <LCD_voidInit+0x266>
		__ticks = 1;
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	9a a3       	std	Y+34, r25	; 0x22
    1334:	89 a3       	std	Y+33, r24	; 0x21
    1336:	3f c0       	rjmp	.+126    	; 0x13b6 <LCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    1338:	6b a1       	ldd	r22, Y+35	; 0x23
    133a:	7c a1       	ldd	r23, Y+36	; 0x24
    133c:	8d a1       	ldd	r24, Y+37	; 0x25
    133e:	9e a1       	ldd	r25, Y+38	; 0x26
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	3f ef       	ldi	r19, 0xFF	; 255
    1344:	4f e7       	ldi	r20, 0x7F	; 127
    1346:	57 e4       	ldi	r21, 0x47	; 71
    1348:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    134c:	18 16       	cp	r1, r24
    134e:	4c f5       	brge	.+82     	; 0x13a2 <LCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1350:	6f a1       	ldd	r22, Y+39	; 0x27
    1352:	78 a5       	ldd	r23, Y+40	; 0x28
    1354:	89 a5       	ldd	r24, Y+41	; 0x29
    1356:	9a a5       	ldd	r25, Y+42	; 0x2a
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e2       	ldi	r20, 0x20	; 32
    135e:	51 e4       	ldi	r21, 0x41	; 65
    1360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	bc 01       	movw	r22, r24
    136a:	cd 01       	movw	r24, r26
    136c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	9a a3       	std	Y+34, r25	; 0x22
    1376:	89 a3       	std	Y+33, r24	; 0x21
    1378:	0f c0       	rjmp	.+30     	; 0x1398 <LCD_voidInit+0x2c6>
    137a:	88 ec       	ldi	r24, 0xC8	; 200
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	98 a3       	std	Y+32, r25	; 0x20
    1380:	8f 8f       	std	Y+31, r24	; 0x1f
    1382:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1384:	98 a1       	ldd	r25, Y+32	; 0x20
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	f1 f7       	brne	.-4      	; 0x1386 <LCD_voidInit+0x2b4>
    138a:	98 a3       	std	Y+32, r25	; 0x20
    138c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    138e:	89 a1       	ldd	r24, Y+33	; 0x21
    1390:	9a a1       	ldd	r25, Y+34	; 0x22
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	9a a3       	std	Y+34, r25	; 0x22
    1396:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1398:	89 a1       	ldd	r24, Y+33	; 0x21
    139a:	9a a1       	ldd	r25, Y+34	; 0x22
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	69 f7       	brne	.-38     	; 0x137a <LCD_voidInit+0x2a8>
    13a0:	14 c0       	rjmp	.+40     	; 0x13ca <LCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a2:	6b a1       	ldd	r22, Y+35	; 0x23
    13a4:	7c a1       	ldd	r23, Y+36	; 0x24
    13a6:	8d a1       	ldd	r24, Y+37	; 0x25
    13a8:	9e a1       	ldd	r25, Y+38	; 0x26
    13aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	9a a3       	std	Y+34, r25	; 0x22
    13b4:	89 a3       	std	Y+33, r24	; 0x21
    13b6:	89 a1       	ldd	r24, Y+33	; 0x21
    13b8:	9a a1       	ldd	r25, Y+34	; 0x22
    13ba:	9e 8f       	std	Y+30, r25	; 0x1e
    13bc:	8d 8f       	std	Y+29, r24	; 0x1d
    13be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	f1 f7       	brne	.-4      	; 0x13c2 <LCD_voidInit+0x2f0>
    13c6:	9e 8f       	std	Y+30, r25	; 0x1e
    13c8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_voidSendCmd(0x01);
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <LCD_voidSendCmd>
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	a0 e0       	ldi	r26, 0x00	; 0
    13d6:	b0 e4       	ldi	r27, 0x40	; 64
    13d8:	89 8f       	std	Y+25, r24	; 0x19
    13da:	9a 8f       	std	Y+26, r25	; 0x1a
    13dc:	ab 8f       	std	Y+27, r26	; 0x1b
    13de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e0:	69 8d       	ldd	r22, Y+25	; 0x19
    13e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	4a ef       	ldi	r20, 0xFA	; 250
    13ee:	54 e4       	ldi	r21, 0x44	; 68
    13f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	8d 8b       	std	Y+21, r24	; 0x15
    13fa:	9e 8b       	std	Y+22, r25	; 0x16
    13fc:	af 8b       	std	Y+23, r26	; 0x17
    13fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1400:	6d 89       	ldd	r22, Y+21	; 0x15
    1402:	7e 89       	ldd	r23, Y+22	; 0x16
    1404:	8f 89       	ldd	r24, Y+23	; 0x17
    1406:	98 8d       	ldd	r25, Y+24	; 0x18
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e8       	ldi	r20, 0x80	; 128
    140e:	5f e3       	ldi	r21, 0x3F	; 63
    1410:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1414:	88 23       	and	r24, r24
    1416:	2c f4       	brge	.+10     	; 0x1422 <LCD_voidInit+0x350>
		__ticks = 1;
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	9c 8b       	std	Y+20, r25	; 0x14
    141e:	8b 8b       	std	Y+19, r24	; 0x13
    1420:	3f c0       	rjmp	.+126    	; 0x14a0 <LCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    1422:	6d 89       	ldd	r22, Y+21	; 0x15
    1424:	7e 89       	ldd	r23, Y+22	; 0x16
    1426:	8f 89       	ldd	r24, Y+23	; 0x17
    1428:	98 8d       	ldd	r25, Y+24	; 0x18
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	3f ef       	ldi	r19, 0xFF	; 255
    142e:	4f e7       	ldi	r20, 0x7F	; 127
    1430:	57 e4       	ldi	r21, 0x47	; 71
    1432:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1436:	18 16       	cp	r1, r24
    1438:	4c f5       	brge	.+82     	; 0x148c <LCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    143a:	69 8d       	ldd	r22, Y+25	; 0x19
    143c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    143e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1440:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e2       	ldi	r20, 0x20	; 32
    1448:	51 e4       	ldi	r21, 0x41	; 65
    144a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	bc 01       	movw	r22, r24
    1454:	cd 01       	movw	r24, r26
    1456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	9c 8b       	std	Y+20, r25	; 0x14
    1460:	8b 8b       	std	Y+19, r24	; 0x13
    1462:	0f c0       	rjmp	.+30     	; 0x1482 <LCD_voidInit+0x3b0>
    1464:	88 ec       	ldi	r24, 0xC8	; 200
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	9a 8b       	std	Y+18, r25	; 0x12
    146a:	89 8b       	std	Y+17, r24	; 0x11
    146c:	89 89       	ldd	r24, Y+17	; 0x11
    146e:	9a 89       	ldd	r25, Y+18	; 0x12
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	f1 f7       	brne	.-4      	; 0x1470 <LCD_voidInit+0x39e>
    1474:	9a 8b       	std	Y+18, r25	; 0x12
    1476:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1478:	8b 89       	ldd	r24, Y+19	; 0x13
    147a:	9c 89       	ldd	r25, Y+20	; 0x14
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	9c 8b       	std	Y+20, r25	; 0x14
    1480:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1482:	8b 89       	ldd	r24, Y+19	; 0x13
    1484:	9c 89       	ldd	r25, Y+20	; 0x14
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	69 f7       	brne	.-38     	; 0x1464 <LCD_voidInit+0x392>
    148a:	14 c0       	rjmp	.+40     	; 0x14b4 <LCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    148c:	6d 89       	ldd	r22, Y+21	; 0x15
    148e:	7e 89       	ldd	r23, Y+22	; 0x16
    1490:	8f 89       	ldd	r24, Y+23	; 0x17
    1492:	98 8d       	ldd	r25, Y+24	; 0x18
    1494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1498:	dc 01       	movw	r26, r24
    149a:	cb 01       	movw	r24, r22
    149c:	9c 8b       	std	Y+20, r25	; 0x14
    149e:	8b 8b       	std	Y+19, r24	; 0x13
    14a0:	8b 89       	ldd	r24, Y+19	; 0x13
    14a2:	9c 89       	ldd	r25, Y+20	; 0x14
    14a4:	98 8b       	std	Y+16, r25	; 0x10
    14a6:	8f 87       	std	Y+15, r24	; 0x0f
    14a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14aa:	98 89       	ldd	r25, Y+16	; 0x10
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	f1 f7       	brne	.-4      	; 0x14ac <LCD_voidInit+0x3da>
    14b0:	98 8b       	std	Y+16, r25	; 0x10
    14b2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_voidSendCmd(0x06);
    14b4:	86 e0       	ldi	r24, 0x06	; 6
    14b6:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <LCD_voidSendCmd>
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	a0 e0       	ldi	r26, 0x00	; 0
    14c0:	b0 e4       	ldi	r27, 0x40	; 64
    14c2:	8b 87       	std	Y+11, r24	; 0x0b
    14c4:	9c 87       	std	Y+12, r25	; 0x0c
    14c6:	ad 87       	std	Y+13, r26	; 0x0d
    14c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    14cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	4a ef       	ldi	r20, 0xFA	; 250
    14d8:	54 e4       	ldi	r21, 0x44	; 68
    14da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	8f 83       	std	Y+7, r24	; 0x07
    14e4:	98 87       	std	Y+8, r25	; 0x08
    14e6:	a9 87       	std	Y+9, r26	; 0x09
    14e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ea:	6f 81       	ldd	r22, Y+7	; 0x07
    14ec:	78 85       	ldd	r23, Y+8	; 0x08
    14ee:	89 85       	ldd	r24, Y+9	; 0x09
    14f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e8       	ldi	r20, 0x80	; 128
    14f8:	5f e3       	ldi	r21, 0x3F	; 63
    14fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14fe:	88 23       	and	r24, r24
    1500:	2c f4       	brge	.+10     	; 0x150c <LCD_voidInit+0x43a>
		__ticks = 1;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	9e 83       	std	Y+6, r25	; 0x06
    1508:	8d 83       	std	Y+5, r24	; 0x05
    150a:	3f c0       	rjmp	.+126    	; 0x158a <LCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    150c:	6f 81       	ldd	r22, Y+7	; 0x07
    150e:	78 85       	ldd	r23, Y+8	; 0x08
    1510:	89 85       	ldd	r24, Y+9	; 0x09
    1512:	9a 85       	ldd	r25, Y+10	; 0x0a
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	3f ef       	ldi	r19, 0xFF	; 255
    1518:	4f e7       	ldi	r20, 0x7F	; 127
    151a:	57 e4       	ldi	r21, 0x47	; 71
    151c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1520:	18 16       	cp	r1, r24
    1522:	4c f5       	brge	.+82     	; 0x1576 <LCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1524:	6b 85       	ldd	r22, Y+11	; 0x0b
    1526:	7c 85       	ldd	r23, Y+12	; 0x0c
    1528:	8d 85       	ldd	r24, Y+13	; 0x0d
    152a:	9e 85       	ldd	r25, Y+14	; 0x0e
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e2       	ldi	r20, 0x20	; 32
    1532:	51 e4       	ldi	r21, 0x41	; 65
    1534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	bc 01       	movw	r22, r24
    153e:	cd 01       	movw	r24, r26
    1540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	9e 83       	std	Y+6, r25	; 0x06
    154a:	8d 83       	std	Y+5, r24	; 0x05
    154c:	0f c0       	rjmp	.+30     	; 0x156c <LCD_voidInit+0x49a>
    154e:	88 ec       	ldi	r24, 0xC8	; 200
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9c 83       	std	Y+4, r25	; 0x04
    1554:	8b 83       	std	Y+3, r24	; 0x03
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	f1 f7       	brne	.-4      	; 0x155a <LCD_voidInit+0x488>
    155e:	9c 83       	std	Y+4, r25	; 0x04
    1560:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1562:	8d 81       	ldd	r24, Y+5	; 0x05
    1564:	9e 81       	ldd	r25, Y+6	; 0x06
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	69 f7       	brne	.-38     	; 0x154e <LCD_voidInit+0x47c>
    1574:	14 c0       	rjmp	.+40     	; 0x159e <LCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1576:	6f 81       	ldd	r22, Y+7	; 0x07
    1578:	78 85       	ldd	r23, Y+8	; 0x08
    157a:	89 85       	ldd	r24, Y+9	; 0x09
    157c:	9a 85       	ldd	r25, Y+10	; 0x0a
    157e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	9e 83       	std	Y+6, r25	; 0x06
    1588:	8d 83       	std	Y+5, r24	; 0x05
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	9a 83       	std	Y+2, r25	; 0x02
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	9a 81       	ldd	r25, Y+2	; 0x02
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <LCD_voidInit+0x4c4>
    159a:	9a 83       	std	Y+2, r25	; 0x02
    159c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	
}
    159e:	ca 5b       	subi	r28, 0xBA	; 186
    15a0:	df 4f       	sbci	r29, 0xFF	; 255
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	1f 91       	pop	r17
    15b2:	0f 91       	pop	r16
    15b4:	08 95       	ret

000015b6 <LCD_voidSendCmd>:

void LCD_voidSendCmd(u8 u8CmdCpy){
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	0f 92       	push	r0
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinValue(LCD_u8RS, DIO_u8LOW);
    15c2:	85 e1       	ldi	r24, 0x15	; 21
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	voidPutOnBus(u8CmdCpy);
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	0e 94 01 0b 	call	0x1602	; 0x1602 <voidPutOnBus>
}
    15d0:	0f 90       	pop	r0
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 u8CharCpy){
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	0f 92       	push	r0
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinValue(LCD_u8RS,DIO_u8HIGH);
    15e4:	85 e1       	ldi	r24, 0x15	; 21
    15e6:	61 e0       	ldi	r22, 0x01	; 1
    15e8:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8RW,DIO_u8LOW);
    15ec:	86 e1       	ldi	r24, 0x16	; 22
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	voidPutOnBus(u8CharCpy);
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	0e 94 01 0b 	call	0x1602	; 0x1602 <voidPutOnBus>
}
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <voidPutOnBus>:


static void voidPutOnBus (u8 u8DCmdCpy){
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	6d 97       	sbiw	r28, 0x1d	; 29
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	8d 8f       	std	Y+29, r24	; 0x1d
DIO_enuSetPinValue(LCD_u8RW, DIO_u8LOW);
    1618:	86 e1       	ldi	r24, 0x16	; 22
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>

DIO_enuSetPinValue(LCD_u8DATA_0,GET_BIT(u8DCmdCpy,0));
    1620:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1622:	98 2f       	mov	r25, r24
    1624:	91 70       	andi	r25, 0x01	; 1
    1626:	8f e1       	ldi	r24, 0x1F	; 31
    1628:	69 2f       	mov	r22, r25
    162a:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
DIO_enuSetPinValue(LCD_u8DATA_1,GET_BIT(u8DCmdCpy,1));
    162e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1630:	86 95       	lsr	r24
    1632:	98 2f       	mov	r25, r24
    1634:	91 70       	andi	r25, 0x01	; 1
    1636:	8e e1       	ldi	r24, 0x1E	; 30
    1638:	69 2f       	mov	r22, r25
    163a:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
DIO_enuSetPinValue(LCD_u8DATA_2,GET_BIT(u8DCmdCpy,2));
    163e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1640:	86 95       	lsr	r24
    1642:	86 95       	lsr	r24
    1644:	98 2f       	mov	r25, r24
    1646:	91 70       	andi	r25, 0x01	; 1
    1648:	8d e1       	ldi	r24, 0x1D	; 29
    164a:	69 2f       	mov	r22, r25
    164c:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
DIO_enuSetPinValue(LCD_u8DATA_3,GET_BIT(u8DCmdCpy,3));
    1650:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1652:	86 95       	lsr	r24
    1654:	86 95       	lsr	r24
    1656:	86 95       	lsr	r24
    1658:	98 2f       	mov	r25, r24
    165a:	91 70       	andi	r25, 0x01	; 1
    165c:	8c e1       	ldi	r24, 0x1C	; 28
    165e:	69 2f       	mov	r22, r25
    1660:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
DIO_enuSetPinValue(LCD_u8DATA_4,GET_BIT(u8DCmdCpy,4));
    1664:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1666:	82 95       	swap	r24
    1668:	8f 70       	andi	r24, 0x0F	; 15
    166a:	98 2f       	mov	r25, r24
    166c:	91 70       	andi	r25, 0x01	; 1
    166e:	8b e1       	ldi	r24, 0x1B	; 27
    1670:	69 2f       	mov	r22, r25
    1672:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
DIO_enuSetPinValue(LCD_u8DATA_5,GET_BIT(u8DCmdCpy,5));
    1676:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1678:	82 95       	swap	r24
    167a:	86 95       	lsr	r24
    167c:	87 70       	andi	r24, 0x07	; 7
    167e:	98 2f       	mov	r25, r24
    1680:	91 70       	andi	r25, 0x01	; 1
    1682:	8a e1       	ldi	r24, 0x1A	; 26
    1684:	69 2f       	mov	r22, r25
    1686:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
DIO_enuSetPinValue(LCD_u8DATA_6,GET_BIT(u8DCmdCpy,6));
    168a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    168c:	82 95       	swap	r24
    168e:	86 95       	lsr	r24
    1690:	86 95       	lsr	r24
    1692:	83 70       	andi	r24, 0x03	; 3
    1694:	98 2f       	mov	r25, r24
    1696:	91 70       	andi	r25, 0x01	; 1
    1698:	89 e1       	ldi	r24, 0x19	; 25
    169a:	69 2f       	mov	r22, r25
    169c:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
DIO_enuSetPinValue(LCD_u8DATA_7,GET_BIT(u8DCmdCpy,7));
    16a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16a2:	98 2f       	mov	r25, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	99 27       	eor	r25, r25
    16a8:	99 1f       	adc	r25, r25
    16aa:	88 e1       	ldi	r24, 0x18	; 24
    16ac:	69 2f       	mov	r22, r25
    16ae:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>

DIO_enuSetPinValue(LCD_u8EN, DIO_u8HIGH);
    16b2:	87 e1       	ldi	r24, 0x17	; 23
    16b4:	61 e0       	ldi	r22, 0x01	; 1
    16b6:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	a0 e8       	ldi	r26, 0x80	; 128
    16c0:	bf e3       	ldi	r27, 0x3F	; 63
    16c2:	89 8f       	std	Y+25, r24	; 0x19
    16c4:	9a 8f       	std	Y+26, r25	; 0x1a
    16c6:	ab 8f       	std	Y+27, r26	; 0x1b
    16c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ca:	69 8d       	ldd	r22, Y+25	; 0x19
    16cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	4a ef       	ldi	r20, 0xFA	; 250
    16d8:	54 e4       	ldi	r21, 0x44	; 68
    16da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	8d 8b       	std	Y+21, r24	; 0x15
    16e4:	9e 8b       	std	Y+22, r25	; 0x16
    16e6:	af 8b       	std	Y+23, r26	; 0x17
    16e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16ea:	6d 89       	ldd	r22, Y+21	; 0x15
    16ec:	7e 89       	ldd	r23, Y+22	; 0x16
    16ee:	8f 89       	ldd	r24, Y+23	; 0x17
    16f0:	98 8d       	ldd	r25, Y+24	; 0x18
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e8       	ldi	r20, 0x80	; 128
    16f8:	5f e3       	ldi	r21, 0x3F	; 63
    16fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16fe:	88 23       	and	r24, r24
    1700:	2c f4       	brge	.+10     	; 0x170c <voidPutOnBus+0x10a>
		__ticks = 1;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	9c 8b       	std	Y+20, r25	; 0x14
    1708:	8b 8b       	std	Y+19, r24	; 0x13
    170a:	3f c0       	rjmp	.+126    	; 0x178a <voidPutOnBus+0x188>
	else if (__tmp > 65535)
    170c:	6d 89       	ldd	r22, Y+21	; 0x15
    170e:	7e 89       	ldd	r23, Y+22	; 0x16
    1710:	8f 89       	ldd	r24, Y+23	; 0x17
    1712:	98 8d       	ldd	r25, Y+24	; 0x18
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	3f ef       	ldi	r19, 0xFF	; 255
    1718:	4f e7       	ldi	r20, 0x7F	; 127
    171a:	57 e4       	ldi	r21, 0x47	; 71
    171c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1720:	18 16       	cp	r1, r24
    1722:	4c f5       	brge	.+82     	; 0x1776 <voidPutOnBus+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1724:	69 8d       	ldd	r22, Y+25	; 0x19
    1726:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1728:	8b 8d       	ldd	r24, Y+27	; 0x1b
    172a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e2       	ldi	r20, 0x20	; 32
    1732:	51 e4       	ldi	r21, 0x41	; 65
    1734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	bc 01       	movw	r22, r24
    173e:	cd 01       	movw	r24, r26
    1740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	9c 8b       	std	Y+20, r25	; 0x14
    174a:	8b 8b       	std	Y+19, r24	; 0x13
    174c:	0f c0       	rjmp	.+30     	; 0x176c <voidPutOnBus+0x16a>
    174e:	88 ec       	ldi	r24, 0xC8	; 200
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	9a 8b       	std	Y+18, r25	; 0x12
    1754:	89 8b       	std	Y+17, r24	; 0x11
    1756:	89 89       	ldd	r24, Y+17	; 0x11
    1758:	9a 89       	ldd	r25, Y+18	; 0x12
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	f1 f7       	brne	.-4      	; 0x175a <voidPutOnBus+0x158>
    175e:	9a 8b       	std	Y+18, r25	; 0x12
    1760:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1762:	8b 89       	ldd	r24, Y+19	; 0x13
    1764:	9c 89       	ldd	r25, Y+20	; 0x14
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	9c 8b       	std	Y+20, r25	; 0x14
    176a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176c:	8b 89       	ldd	r24, Y+19	; 0x13
    176e:	9c 89       	ldd	r25, Y+20	; 0x14
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	69 f7       	brne	.-38     	; 0x174e <voidPutOnBus+0x14c>
    1774:	14 c0       	rjmp	.+40     	; 0x179e <voidPutOnBus+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1776:	6d 89       	ldd	r22, Y+21	; 0x15
    1778:	7e 89       	ldd	r23, Y+22	; 0x16
    177a:	8f 89       	ldd	r24, Y+23	; 0x17
    177c:	98 8d       	ldd	r25, Y+24	; 0x18
    177e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	9c 8b       	std	Y+20, r25	; 0x14
    1788:	8b 8b       	std	Y+19, r24	; 0x13
    178a:	8b 89       	ldd	r24, Y+19	; 0x13
    178c:	9c 89       	ldd	r25, Y+20	; 0x14
    178e:	98 8b       	std	Y+16, r25	; 0x10
    1790:	8f 87       	std	Y+15, r24	; 0x0f
    1792:	8f 85       	ldd	r24, Y+15	; 0x0f
    1794:	98 89       	ldd	r25, Y+16	; 0x10
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <voidPutOnBus+0x194>
    179a:	98 8b       	std	Y+16, r25	; 0x10
    179c:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(1);
DIO_enuSetPinValue(LCD_u8EN, DIO_u8LOW);
    179e:	87 e1       	ldi	r24, 0x17	; 23
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	a0 e8       	ldi	r26, 0x80	; 128
    17ac:	bf e3       	ldi	r27, 0x3F	; 63
    17ae:	8b 87       	std	Y+11, r24	; 0x0b
    17b0:	9c 87       	std	Y+12, r25	; 0x0c
    17b2:	ad 87       	std	Y+13, r26	; 0x0d
    17b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    17bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	4a ef       	ldi	r20, 0xFA	; 250
    17c4:	54 e4       	ldi	r21, 0x44	; 68
    17c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	8f 83       	std	Y+7, r24	; 0x07
    17d0:	98 87       	std	Y+8, r25	; 0x08
    17d2:	a9 87       	std	Y+9, r26	; 0x09
    17d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17d6:	6f 81       	ldd	r22, Y+7	; 0x07
    17d8:	78 85       	ldd	r23, Y+8	; 0x08
    17da:	89 85       	ldd	r24, Y+9	; 0x09
    17dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e8       	ldi	r20, 0x80	; 128
    17e4:	5f e3       	ldi	r21, 0x3F	; 63
    17e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ea:	88 23       	and	r24, r24
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <voidPutOnBus+0x1f6>
		__ticks = 1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	9e 83       	std	Y+6, r25	; 0x06
    17f4:	8d 83       	std	Y+5, r24	; 0x05
    17f6:	3f c0       	rjmp	.+126    	; 0x1876 <voidPutOnBus+0x274>
	else if (__tmp > 65535)
    17f8:	6f 81       	ldd	r22, Y+7	; 0x07
    17fa:	78 85       	ldd	r23, Y+8	; 0x08
    17fc:	89 85       	ldd	r24, Y+9	; 0x09
    17fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	3f ef       	ldi	r19, 0xFF	; 255
    1804:	4f e7       	ldi	r20, 0x7F	; 127
    1806:	57 e4       	ldi	r21, 0x47	; 71
    1808:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    180c:	18 16       	cp	r1, r24
    180e:	4c f5       	brge	.+82     	; 0x1862 <voidPutOnBus+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1810:	6b 85       	ldd	r22, Y+11	; 0x0b
    1812:	7c 85       	ldd	r23, Y+12	; 0x0c
    1814:	8d 85       	ldd	r24, Y+13	; 0x0d
    1816:	9e 85       	ldd	r25, Y+14	; 0x0e
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e2       	ldi	r20, 0x20	; 32
    181e:	51 e4       	ldi	r21, 0x41	; 65
    1820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	bc 01       	movw	r22, r24
    182a:	cd 01       	movw	r24, r26
    182c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	9e 83       	std	Y+6, r25	; 0x06
    1836:	8d 83       	std	Y+5, r24	; 0x05
    1838:	0f c0       	rjmp	.+30     	; 0x1858 <voidPutOnBus+0x256>
    183a:	88 ec       	ldi	r24, 0xC8	; 200
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9c 83       	std	Y+4, r25	; 0x04
    1840:	8b 83       	std	Y+3, r24	; 0x03
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	9c 81       	ldd	r25, Y+4	; 0x04
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	f1 f7       	brne	.-4      	; 0x1846 <voidPutOnBus+0x244>
    184a:	9c 83       	std	Y+4, r25	; 0x04
    184c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
    1850:	9e 81       	ldd	r25, Y+6	; 0x06
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	9e 83       	std	Y+6, r25	; 0x06
    1856:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1858:	8d 81       	ldd	r24, Y+5	; 0x05
    185a:	9e 81       	ldd	r25, Y+6	; 0x06
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	69 f7       	brne	.-38     	; 0x183a <voidPutOnBus+0x238>
    1860:	14 c0       	rjmp	.+40     	; 0x188a <voidPutOnBus+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1862:	6f 81       	ldd	r22, Y+7	; 0x07
    1864:	78 85       	ldd	r23, Y+8	; 0x08
    1866:	89 85       	ldd	r24, Y+9	; 0x09
    1868:	9a 85       	ldd	r25, Y+10	; 0x0a
    186a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	9e 83       	std	Y+6, r25	; 0x06
    1874:	8d 83       	std	Y+5, r24	; 0x05
    1876:	8d 81       	ldd	r24, Y+5	; 0x05
    1878:	9e 81       	ldd	r25, Y+6	; 0x06
    187a:	9a 83       	std	Y+2, r25	; 0x02
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	9a 81       	ldd	r25, Y+2	; 0x02
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	f1 f7       	brne	.-4      	; 0x1882 <voidPutOnBus+0x280>
    1886:	9a 83       	std	Y+2, r25	; 0x02
    1888:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1);
}
    188a:	6d 96       	adiw	r28, 0x1d	; 29
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <LCD_voidClear>:

void LCD_voidClear(void){
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	2e 97       	sbiw	r28, 0x0e	; 14
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmd(0x01);
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <LCD_voidSendCmd>
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	a0 e0       	ldi	r26, 0x00	; 0
    18bc:	b0 e4       	ldi	r27, 0x40	; 64
    18be:	8b 87       	std	Y+11, r24	; 0x0b
    18c0:	9c 87       	std	Y+12, r25	; 0x0c
    18c2:	ad 87       	std	Y+13, r26	; 0x0d
    18c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    18cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	4a ef       	ldi	r20, 0xFA	; 250
    18d4:	54 e4       	ldi	r21, 0x44	; 68
    18d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	8f 83       	std	Y+7, r24	; 0x07
    18e0:	98 87       	std	Y+8, r25	; 0x08
    18e2:	a9 87       	std	Y+9, r26	; 0x09
    18e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18e6:	6f 81       	ldd	r22, Y+7	; 0x07
    18e8:	78 85       	ldd	r23, Y+8	; 0x08
    18ea:	89 85       	ldd	r24, Y+9	; 0x09
    18ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	40 e8       	ldi	r20, 0x80	; 128
    18f4:	5f e3       	ldi	r21, 0x3F	; 63
    18f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18fa:	88 23       	and	r24, r24
    18fc:	2c f4       	brge	.+10     	; 0x1908 <LCD_voidClear+0x6c>
		__ticks = 1;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	9e 83       	std	Y+6, r25	; 0x06
    1904:	8d 83       	std	Y+5, r24	; 0x05
    1906:	3f c0       	rjmp	.+126    	; 0x1986 <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    1908:	6f 81       	ldd	r22, Y+7	; 0x07
    190a:	78 85       	ldd	r23, Y+8	; 0x08
    190c:	89 85       	ldd	r24, Y+9	; 0x09
    190e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	3f ef       	ldi	r19, 0xFF	; 255
    1914:	4f e7       	ldi	r20, 0x7F	; 127
    1916:	57 e4       	ldi	r21, 0x47	; 71
    1918:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    191c:	18 16       	cp	r1, r24
    191e:	4c f5       	brge	.+82     	; 0x1972 <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1920:	6b 85       	ldd	r22, Y+11	; 0x0b
    1922:	7c 85       	ldd	r23, Y+12	; 0x0c
    1924:	8d 85       	ldd	r24, Y+13	; 0x0d
    1926:	9e 85       	ldd	r25, Y+14	; 0x0e
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e2       	ldi	r20, 0x20	; 32
    192e:	51 e4       	ldi	r21, 0x41	; 65
    1930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	bc 01       	movw	r22, r24
    193a:	cd 01       	movw	r24, r26
    193c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	9e 83       	std	Y+6, r25	; 0x06
    1946:	8d 83       	std	Y+5, r24	; 0x05
    1948:	0f c0       	rjmp	.+30     	; 0x1968 <LCD_voidClear+0xcc>
    194a:	88 ec       	ldi	r24, 0xC8	; 200
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	9c 83       	std	Y+4, r25	; 0x04
    1950:	8b 83       	std	Y+3, r24	; 0x03
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <LCD_voidClear+0xba>
    195a:	9c 83       	std	Y+4, r25	; 0x04
    195c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195e:	8d 81       	ldd	r24, Y+5	; 0x05
    1960:	9e 81       	ldd	r25, Y+6	; 0x06
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	9e 83       	std	Y+6, r25	; 0x06
    1966:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1968:	8d 81       	ldd	r24, Y+5	; 0x05
    196a:	9e 81       	ldd	r25, Y+6	; 0x06
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	69 f7       	brne	.-38     	; 0x194a <LCD_voidClear+0xae>
    1970:	14 c0       	rjmp	.+40     	; 0x199a <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1972:	6f 81       	ldd	r22, Y+7	; 0x07
    1974:	78 85       	ldd	r23, Y+8	; 0x08
    1976:	89 85       	ldd	r24, Y+9	; 0x09
    1978:	9a 85       	ldd	r25, Y+10	; 0x0a
    197a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	9e 83       	std	Y+6, r25	; 0x06
    1984:	8d 83       	std	Y+5, r24	; 0x05
    1986:	8d 81       	ldd	r24, Y+5	; 0x05
    1988:	9e 81       	ldd	r25, Y+6	; 0x06
    198a:	9a 83       	std	Y+2, r25	; 0x02
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	9a 81       	ldd	r25, Y+2	; 0x02
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	f1 f7       	brne	.-4      	; 0x1992 <LCD_voidClear+0xf6>
    1996:	9a 83       	std	Y+2, r25	; 0x02
    1998:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    199a:	2e 96       	adiw	r28, 0x0e	; 14
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 u8LineNbCpy, u8 u8CharNbCpy){
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	00 d0       	rcall	.+0      	; 0x19b2 <LCD_voidGoToXY+0x6>
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	6a 83       	std	Y+2, r22	; 0x02
	if(u8LineNbCpy==1){
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	81 30       	cpi	r24, 0x01	; 1
    19be:	29 f4       	brne	.+10     	; 0x19ca <LCD_voidGoToXY+0x1e>
		LCD_voidSendCmd((128+u8CharNbCpy));
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	80 58       	subi	r24, 0x80	; 128
    19c4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <LCD_voidSendCmd>
    19c8:	07 c0       	rjmp	.+14     	; 0x19d8 <LCD_voidGoToXY+0x2c>
	}else if (u8LineNbCpy==2){
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	82 30       	cpi	r24, 0x02	; 2
    19ce:	21 f4       	brne	.+8      	; 0x19d8 <LCD_voidGoToXY+0x2c>
		LCD_voidSendCmd((192+u8CharNbCpy));
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	80 54       	subi	r24, 0x40	; 64
    19d4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <LCD_voidSendCmd>
	}
}
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <LCD_voidWriteString>:

void LCD_voidWriteString(u8 *pu8StringCpy){
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <LCD_voidWriteString+0x6>
    19e8:	0f 92       	push	r0
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	9b 83       	std	Y+3, r25	; 0x03
    19f0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Counter=0;
    19f2:	19 82       	std	Y+1, r1	; 0x01
    19f4:	0e c0       	rjmp	.+28     	; 0x1a12 <LCD_voidWriteString+0x30>
	
	while (pu8StringCpy[Loc_u8Counter] != '\0')
	{
		LCD_voidWriteChar(pu8StringCpy[Loc_u8Counter]);
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1a00:	fc 01       	movw	r30, r24
    1a02:	e2 0f       	add	r30, r18
    1a04:	f3 1f       	adc	r31, r19
    1a06:	80 81       	ld	r24, Z
    1a08:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <LCD_voidWriteChar>
		Loc_u8Counter++;
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	8f 5f       	subi	r24, 0xFF	; 255
    1a10:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8 *pu8StringCpy){
	u8 Loc_u8Counter=0;
	
	while (pu8StringCpy[Loc_u8Counter] != '\0')
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	e2 0f       	add	r30, r18
    1a20:	f3 1f       	adc	r31, r19
    1a22:	80 81       	ld	r24, Z
    1a24:	88 23       	and	r24, r24
    1a26:	39 f7       	brne	.-50     	; 0x19f6 <LCD_voidWriteString+0x14>
	{
		LCD_voidWriteChar(pu8StringCpy[Loc_u8Counter]);
		Loc_u8Counter++;
	}
}
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <SEV_voidDisplayNb>:
#include "SEV_cfg.h"
#include "SEV_priv.h"


void SEV_voidDisplayNb(u8 u8ChipNbCpy , u8 u8NumberCpy)
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	61 97       	sbiw	r28, 0x11	; 17
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	de bf       	out	0x3e, r29	; 62
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	cd bf       	out	0x3d, r28	; 61
    1a48:	8b 87       	std	Y+11, r24	; 0x0b
    1a4a:	6c 87       	std	Y+12, r22	; 0x0c
	#if SEV_u8Mode == CM_ANODE
	u8 SEV_u8D [10]={0xc0 , 0xF9 ,0xA4 ,0xB0 ,0x99 ,0x92 , 0x82,0xF8 , 0x80 , 0x90};
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	01 96       	adiw	r24, 0x01	; 1
    1a50:	9e 87       	std	Y+14, r25	; 0x0e
    1a52:	8d 87       	std	Y+13, r24	; 0x0d
    1a54:	ee ed       	ldi	r30, 0xDE	; 222
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	f8 8b       	std	Y+16, r31	; 0x10
    1a5a:	ef 87       	std	Y+15, r30	; 0x0f
    1a5c:	fa e0       	ldi	r31, 0x0A	; 10
    1a5e:	f9 8b       	std	Y+17, r31	; 0x11
    1a60:	ef 85       	ldd	r30, Y+15	; 0x0f
    1a62:	f8 89       	ldd	r31, Y+16	; 0x10
    1a64:	00 80       	ld	r0, Z
    1a66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a68:	98 89       	ldd	r25, Y+16	; 0x10
    1a6a:	01 96       	adiw	r24, 0x01	; 1
    1a6c:	98 8b       	std	Y+16, r25	; 0x10
    1a6e:	8f 87       	std	Y+15, r24	; 0x0f
    1a70:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a72:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a74:	00 82       	st	Z, r0
    1a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7a:	01 96       	adiw	r24, 0x01	; 1
    1a7c:	9e 87       	std	Y+14, r25	; 0x0e
    1a7e:	8d 87       	std	Y+13, r24	; 0x0d
    1a80:	99 89       	ldd	r25, Y+17	; 0x11
    1a82:	91 50       	subi	r25, 0x01	; 1
    1a84:	99 8b       	std	Y+17, r25	; 0x11
    1a86:	e9 89       	ldd	r30, Y+17	; 0x11
    1a88:	ee 23       	and	r30, r30
    1a8a:	51 f7       	brne	.-44     	; 0x1a60 <SEV_voidDisplayNb+0x2c>
	#elif SEV_u8Mode == CM_CATHODE
	u8 SEV_u8D [10] = {0x3F , 0x06 , 0x5B , 0x4F , 0x66 ,0x6D ,0x7D ,0x07 ,0x7F,0x6F };
	#endif
	if (u8ChipNbCpy == SEV_LEFT)
    1a8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a8e:	88 23       	and	r24, r24
    1a90:	09 f0       	breq	.+2      	; 0x1a94 <SEV_voidDisplayNb+0x60>
    1a92:	89 c0       	rjmp	.+274    	; 0x1ba6 <SEV_voidDisplayNb+0x172>
	{
		DIO_enuSetPinValue(SEV_u8LPIN_A  , GET_BIT(SEV_u8D[u8NumberCpy] ,0));
    1a94:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	01 96       	adiw	r24, 0x01	; 1
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	e2 0f       	add	r30, r18
    1aa2:	f3 1f       	adc	r31, r19
    1aa4:	80 81       	ld	r24, Z
    1aa6:	98 2f       	mov	r25, r24
    1aa8:	91 70       	andi	r25, 0x01	; 1
    1aaa:	88 e0       	ldi	r24, 0x08	; 8
    1aac:	69 2f       	mov	r22, r25
    1aae:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(SEV_u8LPIN_B  , GET_BIT(SEV_u8D[u8NumberCpy] ,1));
    1ab2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	ce 01       	movw	r24, r28
    1aba:	01 96       	adiw	r24, 0x01	; 1
    1abc:	fc 01       	movw	r30, r24
    1abe:	e2 0f       	add	r30, r18
    1ac0:	f3 1f       	adc	r31, r19
    1ac2:	80 81       	ld	r24, Z
    1ac4:	86 95       	lsr	r24
    1ac6:	98 2f       	mov	r25, r24
    1ac8:	91 70       	andi	r25, 0x01	; 1
    1aca:	89 e0       	ldi	r24, 0x09	; 9
    1acc:	69 2f       	mov	r22, r25
    1ace:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(SEV_u8LPIN_C  , GET_BIT(SEV_u8D[u8NumberCpy] ,2));
    1ad2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	ce 01       	movw	r24, r28
    1ada:	01 96       	adiw	r24, 0x01	; 1
    1adc:	fc 01       	movw	r30, r24
    1ade:	e2 0f       	add	r30, r18
    1ae0:	f3 1f       	adc	r31, r19
    1ae2:	80 81       	ld	r24, Z
    1ae4:	86 95       	lsr	r24
    1ae6:	86 95       	lsr	r24
    1ae8:	98 2f       	mov	r25, r24
    1aea:	91 70       	andi	r25, 0x01	; 1
    1aec:	8a e0       	ldi	r24, 0x0A	; 10
    1aee:	69 2f       	mov	r22, r25
    1af0:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(SEV_u8LPIN_D  , GET_BIT(SEV_u8D[u8NumberCpy] ,3));
    1af4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	ce 01       	movw	r24, r28
    1afc:	01 96       	adiw	r24, 0x01	; 1
    1afe:	fc 01       	movw	r30, r24
    1b00:	e2 0f       	add	r30, r18
    1b02:	f3 1f       	adc	r31, r19
    1b04:	80 81       	ld	r24, Z
    1b06:	86 95       	lsr	r24
    1b08:	86 95       	lsr	r24
    1b0a:	86 95       	lsr	r24
    1b0c:	98 2f       	mov	r25, r24
    1b0e:	91 70       	andi	r25, 0x01	; 1
    1b10:	8b e0       	ldi	r24, 0x0B	; 11
    1b12:	69 2f       	mov	r22, r25
    1b14:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(SEV_u8LPIN_E  , GET_BIT(SEV_u8D[u8NumberCpy] ,4));
    1b18:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	ce 01       	movw	r24, r28
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	fc 01       	movw	r30, r24
    1b24:	e2 0f       	add	r30, r18
    1b26:	f3 1f       	adc	r31, r19
    1b28:	80 81       	ld	r24, Z
    1b2a:	82 95       	swap	r24
    1b2c:	8f 70       	andi	r24, 0x0F	; 15
    1b2e:	98 2f       	mov	r25, r24
    1b30:	91 70       	andi	r25, 0x01	; 1
    1b32:	8c e0       	ldi	r24, 0x0C	; 12
    1b34:	69 2f       	mov	r22, r25
    1b36:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(SEV_u8LPIN_F  , GET_BIT(SEV_u8D[u8NumberCpy] ,5));
    1b3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	ce 01       	movw	r24, r28
    1b42:	01 96       	adiw	r24, 0x01	; 1
    1b44:	fc 01       	movw	r30, r24
    1b46:	e2 0f       	add	r30, r18
    1b48:	f3 1f       	adc	r31, r19
    1b4a:	80 81       	ld	r24, Z
    1b4c:	82 95       	swap	r24
    1b4e:	86 95       	lsr	r24
    1b50:	87 70       	andi	r24, 0x07	; 7
    1b52:	98 2f       	mov	r25, r24
    1b54:	91 70       	andi	r25, 0x01	; 1
    1b56:	8d e0       	ldi	r24, 0x0D	; 13
    1b58:	69 2f       	mov	r22, r25
    1b5a:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(SEV_u8LPIN_G  , GET_BIT(SEV_u8D[u8NumberCpy] ,6));
    1b5e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	ce 01       	movw	r24, r28
    1b66:	01 96       	adiw	r24, 0x01	; 1
    1b68:	fc 01       	movw	r30, r24
    1b6a:	e2 0f       	add	r30, r18
    1b6c:	f3 1f       	adc	r31, r19
    1b6e:	80 81       	ld	r24, Z
    1b70:	82 95       	swap	r24
    1b72:	86 95       	lsr	r24
    1b74:	86 95       	lsr	r24
    1b76:	83 70       	andi	r24, 0x03	; 3
    1b78:	98 2f       	mov	r25, r24
    1b7a:	91 70       	andi	r25, 0x01	; 1
    1b7c:	8e e0       	ldi	r24, 0x0E	; 14
    1b7e:	69 2f       	mov	r22, r25
    1b80:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(SEV_u8LPIN_CM , GET_BIT(SEV_u8D[u8NumberCpy] ,7));
    1b84:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	01 96       	adiw	r24, 0x01	; 1
    1b8e:	fc 01       	movw	r30, r24
    1b90:	e2 0f       	add	r30, r18
    1b92:	f3 1f       	adc	r31, r19
    1b94:	80 81       	ld	r24, Z
    1b96:	98 2f       	mov	r25, r24
    1b98:	99 1f       	adc	r25, r25
    1b9a:	99 27       	eor	r25, r25
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	8f e0       	ldi	r24, 0x0F	; 15
    1ba0:	69 2f       	mov	r22, r25
    1ba2:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	}

	
}
    1ba6:	61 96       	adiw	r28, 0x11	; 17
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <Stepper_RotateCW>:
#include "STEPPER_cfg.h"
#include "STEPPER_priv.h"


void Stepper_RotateCW(void)
{	
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	e8 97       	sbiw	r28, 0x38	; 56
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
	DIO_enuSetPinValue(Coil_Blue, DIO_u8HIGH);
    1bcc:	80 e1       	ldi	r24, 0x10	; 16
    1bce:	61 e0       	ldi	r22, 0x01	; 1
    1bd0:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Pink, DIO_u8LOW);
    1bd4:	81 e1       	ldi	r24, 0x11	; 17
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Yellow, DIO_u8LOW);
    1bdc:	82 e1       	ldi	r24, 0x12	; 18
    1bde:	60 e0       	ldi	r22, 0x00	; 0
    1be0:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Orange, DIO_u8LOW);
    1be4:	83 e1       	ldi	r24, 0x13	; 19
    1be6:	60 e0       	ldi	r22, 0x00	; 0
    1be8:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	a0 e7       	ldi	r26, 0x70	; 112
    1bf2:	b1 e4       	ldi	r27, 0x41	; 65
    1bf4:	8d ab       	std	Y+53, r24	; 0x35
    1bf6:	9e ab       	std	Y+54, r25	; 0x36
    1bf8:	af ab       	std	Y+55, r26	; 0x37
    1bfa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfc:	6d a9       	ldd	r22, Y+53	; 0x35
    1bfe:	7e a9       	ldd	r23, Y+54	; 0x36
    1c00:	8f a9       	ldd	r24, Y+55	; 0x37
    1c02:	98 ad       	ldd	r25, Y+56	; 0x38
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	4a ef       	ldi	r20, 0xFA	; 250
    1c0a:	54 e4       	ldi	r21, 0x44	; 68
    1c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	89 ab       	std	Y+49, r24	; 0x31
    1c16:	9a ab       	std	Y+50, r25	; 0x32
    1c18:	ab ab       	std	Y+51, r26	; 0x33
    1c1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c1c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c1e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c20:	8b a9       	ldd	r24, Y+51	; 0x33
    1c22:	9c a9       	ldd	r25, Y+52	; 0x34
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e8       	ldi	r20, 0x80	; 128
    1c2a:	5f e3       	ldi	r21, 0x3F	; 63
    1c2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c30:	88 23       	and	r24, r24
    1c32:	2c f4       	brge	.+10     	; 0x1c3e <Stepper_RotateCW+0x86>
		__ticks = 1;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	98 ab       	std	Y+48, r25	; 0x30
    1c3a:	8f a7       	std	Y+47, r24	; 0x2f
    1c3c:	3f c0       	rjmp	.+126    	; 0x1cbc <Stepper_RotateCW+0x104>
	else if (__tmp > 65535)
    1c3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c40:	7a a9       	ldd	r23, Y+50	; 0x32
    1c42:	8b a9       	ldd	r24, Y+51	; 0x33
    1c44:	9c a9       	ldd	r25, Y+52	; 0x34
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	3f ef       	ldi	r19, 0xFF	; 255
    1c4a:	4f e7       	ldi	r20, 0x7F	; 127
    1c4c:	57 e4       	ldi	r21, 0x47	; 71
    1c4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c52:	18 16       	cp	r1, r24
    1c54:	4c f5       	brge	.+82     	; 0x1ca8 <Stepper_RotateCW+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c56:	6d a9       	ldd	r22, Y+53	; 0x35
    1c58:	7e a9       	ldd	r23, Y+54	; 0x36
    1c5a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c5c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e2       	ldi	r20, 0x20	; 32
    1c64:	51 e4       	ldi	r21, 0x41	; 65
    1c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	98 ab       	std	Y+48, r25	; 0x30
    1c7c:	8f a7       	std	Y+47, r24	; 0x2f
    1c7e:	0f c0       	rjmp	.+30     	; 0x1c9e <Stepper_RotateCW+0xe6>
    1c80:	88 ec       	ldi	r24, 0xC8	; 200
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	9e a7       	std	Y+46, r25	; 0x2e
    1c86:	8d a7       	std	Y+45, r24	; 0x2d
    1c88:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <Stepper_RotateCW+0xd4>
    1c90:	9e a7       	std	Y+46, r25	; 0x2e
    1c92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c96:	98 a9       	ldd	r25, Y+48	; 0x30
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	98 ab       	std	Y+48, r25	; 0x30
    1c9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ca0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ca2:	00 97       	sbiw	r24, 0x00	; 0
    1ca4:	69 f7       	brne	.-38     	; 0x1c80 <Stepper_RotateCW+0xc8>
    1ca6:	14 c0       	rjmp	.+40     	; 0x1cd0 <Stepper_RotateCW+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca8:	69 a9       	ldd	r22, Y+49	; 0x31
    1caa:	7a a9       	ldd	r23, Y+50	; 0x32
    1cac:	8b a9       	ldd	r24, Y+51	; 0x33
    1cae:	9c a9       	ldd	r25, Y+52	; 0x34
    1cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	98 ab       	std	Y+48, r25	; 0x30
    1cba:	8f a7       	std	Y+47, r24	; 0x2f
    1cbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cbe:	98 a9       	ldd	r25, Y+48	; 0x30
    1cc0:	9c a7       	std	Y+44, r25	; 0x2c
    1cc2:	8b a7       	std	Y+43, r24	; 0x2b
    1cc4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cc6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <Stepper_RotateCW+0x110>
    1ccc:	9c a7       	std	Y+44, r25	; 0x2c
    1cce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(15);

	DIO_enuSetPinValue(Coil_Blue, DIO_u8LOW);
    1cd0:	80 e1       	ldi	r24, 0x10	; 16
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Pink, DIO_u8HIGH);
    1cd8:	81 e1       	ldi	r24, 0x11	; 17
    1cda:	61 e0       	ldi	r22, 0x01	; 1
    1cdc:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Yellow, DIO_u8LOW);
    1ce0:	82 e1       	ldi	r24, 0x12	; 18
    1ce2:	60 e0       	ldi	r22, 0x00	; 0
    1ce4:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Orange, DIO_u8LOW);
    1ce8:	83 e1       	ldi	r24, 0x13	; 19
    1cea:	60 e0       	ldi	r22, 0x00	; 0
    1cec:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	a0 e7       	ldi	r26, 0x70	; 112
    1cf6:	b1 e4       	ldi	r27, 0x41	; 65
    1cf8:	8f a3       	std	Y+39, r24	; 0x27
    1cfa:	98 a7       	std	Y+40, r25	; 0x28
    1cfc:	a9 a7       	std	Y+41, r26	; 0x29
    1cfe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d00:	6f a1       	ldd	r22, Y+39	; 0x27
    1d02:	78 a5       	ldd	r23, Y+40	; 0x28
    1d04:	89 a5       	ldd	r24, Y+41	; 0x29
    1d06:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	4a ef       	ldi	r20, 0xFA	; 250
    1d0e:	54 e4       	ldi	r21, 0x44	; 68
    1d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	8b a3       	std	Y+35, r24	; 0x23
    1d1a:	9c a3       	std	Y+36, r25	; 0x24
    1d1c:	ad a3       	std	Y+37, r26	; 0x25
    1d1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d20:	6b a1       	ldd	r22, Y+35	; 0x23
    1d22:	7c a1       	ldd	r23, Y+36	; 0x24
    1d24:	8d a1       	ldd	r24, Y+37	; 0x25
    1d26:	9e a1       	ldd	r25, Y+38	; 0x26
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e8       	ldi	r20, 0x80	; 128
    1d2e:	5f e3       	ldi	r21, 0x3F	; 63
    1d30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d34:	88 23       	and	r24, r24
    1d36:	2c f4       	brge	.+10     	; 0x1d42 <Stepper_RotateCW+0x18a>
		__ticks = 1;
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	9a a3       	std	Y+34, r25	; 0x22
    1d3e:	89 a3       	std	Y+33, r24	; 0x21
    1d40:	3f c0       	rjmp	.+126    	; 0x1dc0 <Stepper_RotateCW+0x208>
	else if (__tmp > 65535)
    1d42:	6b a1       	ldd	r22, Y+35	; 0x23
    1d44:	7c a1       	ldd	r23, Y+36	; 0x24
    1d46:	8d a1       	ldd	r24, Y+37	; 0x25
    1d48:	9e a1       	ldd	r25, Y+38	; 0x26
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	3f ef       	ldi	r19, 0xFF	; 255
    1d4e:	4f e7       	ldi	r20, 0x7F	; 127
    1d50:	57 e4       	ldi	r21, 0x47	; 71
    1d52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d56:	18 16       	cp	r1, r24
    1d58:	4c f5       	brge	.+82     	; 0x1dac <Stepper_RotateCW+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5a:	6f a1       	ldd	r22, Y+39	; 0x27
    1d5c:	78 a5       	ldd	r23, Y+40	; 0x28
    1d5e:	89 a5       	ldd	r24, Y+41	; 0x29
    1d60:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e2       	ldi	r20, 0x20	; 32
    1d68:	51 e4       	ldi	r21, 0x41	; 65
    1d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	bc 01       	movw	r22, r24
    1d74:	cd 01       	movw	r24, r26
    1d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	9a a3       	std	Y+34, r25	; 0x22
    1d80:	89 a3       	std	Y+33, r24	; 0x21
    1d82:	0f c0       	rjmp	.+30     	; 0x1da2 <Stepper_RotateCW+0x1ea>
    1d84:	88 ec       	ldi	r24, 0xC8	; 200
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	98 a3       	std	Y+32, r25	; 0x20
    1d8a:	8f 8f       	std	Y+31, r24	; 0x1f
    1d8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d8e:	98 a1       	ldd	r25, Y+32	; 0x20
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	f1 f7       	brne	.-4      	; 0x1d90 <Stepper_RotateCW+0x1d8>
    1d94:	98 a3       	std	Y+32, r25	; 0x20
    1d96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d98:	89 a1       	ldd	r24, Y+33	; 0x21
    1d9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	9a a3       	std	Y+34, r25	; 0x22
    1da0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da2:	89 a1       	ldd	r24, Y+33	; 0x21
    1da4:	9a a1       	ldd	r25, Y+34	; 0x22
    1da6:	00 97       	sbiw	r24, 0x00	; 0
    1da8:	69 f7       	brne	.-38     	; 0x1d84 <Stepper_RotateCW+0x1cc>
    1daa:	14 c0       	rjmp	.+40     	; 0x1dd4 <Stepper_RotateCW+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dac:	6b a1       	ldd	r22, Y+35	; 0x23
    1dae:	7c a1       	ldd	r23, Y+36	; 0x24
    1db0:	8d a1       	ldd	r24, Y+37	; 0x25
    1db2:	9e a1       	ldd	r25, Y+38	; 0x26
    1db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	9a a3       	std	Y+34, r25	; 0x22
    1dbe:	89 a3       	std	Y+33, r24	; 0x21
    1dc0:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc2:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc4:	9e 8f       	std	Y+30, r25	; 0x1e
    1dc6:	8d 8f       	std	Y+29, r24	; 0x1d
    1dc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	f1 f7       	brne	.-4      	; 0x1dcc <Stepper_RotateCW+0x214>
    1dd0:	9e 8f       	std	Y+30, r25	; 0x1e
    1dd2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(15);

	DIO_enuSetPinValue(Coil_Blue, DIO_u8LOW);
    1dd4:	80 e1       	ldi	r24, 0x10	; 16
    1dd6:	60 e0       	ldi	r22, 0x00	; 0
    1dd8:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Pink, DIO_u8LOW);
    1ddc:	81 e1       	ldi	r24, 0x11	; 17
    1dde:	60 e0       	ldi	r22, 0x00	; 0
    1de0:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Yellow, DIO_u8HIGH);
    1de4:	82 e1       	ldi	r24, 0x12	; 18
    1de6:	61 e0       	ldi	r22, 0x01	; 1
    1de8:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Orange, DIO_u8LOW);
    1dec:	83 e1       	ldi	r24, 0x13	; 19
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a0 e7       	ldi	r26, 0x70	; 112
    1dfa:	b1 e4       	ldi	r27, 0x41	; 65
    1dfc:	89 8f       	std	Y+25, r24	; 0x19
    1dfe:	9a 8f       	std	Y+26, r25	; 0x1a
    1e00:	ab 8f       	std	Y+27, r26	; 0x1b
    1e02:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e04:	69 8d       	ldd	r22, Y+25	; 0x19
    1e06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	4a ef       	ldi	r20, 0xFA	; 250
    1e12:	54 e4       	ldi	r21, 0x44	; 68
    1e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	8d 8b       	std	Y+21, r24	; 0x15
    1e1e:	9e 8b       	std	Y+22, r25	; 0x16
    1e20:	af 8b       	std	Y+23, r26	; 0x17
    1e22:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e24:	6d 89       	ldd	r22, Y+21	; 0x15
    1e26:	7e 89       	ldd	r23, Y+22	; 0x16
    1e28:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e8       	ldi	r20, 0x80	; 128
    1e32:	5f e3       	ldi	r21, 0x3F	; 63
    1e34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e38:	88 23       	and	r24, r24
    1e3a:	2c f4       	brge	.+10     	; 0x1e46 <Stepper_RotateCW+0x28e>
		__ticks = 1;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	9c 8b       	std	Y+20, r25	; 0x14
    1e42:	8b 8b       	std	Y+19, r24	; 0x13
    1e44:	3f c0       	rjmp	.+126    	; 0x1ec4 <Stepper_RotateCW+0x30c>
	else if (__tmp > 65535)
    1e46:	6d 89       	ldd	r22, Y+21	; 0x15
    1e48:	7e 89       	ldd	r23, Y+22	; 0x16
    1e4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	3f ef       	ldi	r19, 0xFF	; 255
    1e52:	4f e7       	ldi	r20, 0x7F	; 127
    1e54:	57 e4       	ldi	r21, 0x47	; 71
    1e56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e5a:	18 16       	cp	r1, r24
    1e5c:	4c f5       	brge	.+82     	; 0x1eb0 <Stepper_RotateCW+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e2       	ldi	r20, 0x20	; 32
    1e6c:	51 e4       	ldi	r21, 0x41	; 65
    1e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	bc 01       	movw	r22, r24
    1e78:	cd 01       	movw	r24, r26
    1e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	9c 8b       	std	Y+20, r25	; 0x14
    1e84:	8b 8b       	std	Y+19, r24	; 0x13
    1e86:	0f c0       	rjmp	.+30     	; 0x1ea6 <Stepper_RotateCW+0x2ee>
    1e88:	88 ec       	ldi	r24, 0xC8	; 200
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	9a 8b       	std	Y+18, r25	; 0x12
    1e8e:	89 8b       	std	Y+17, r24	; 0x11
    1e90:	89 89       	ldd	r24, Y+17	; 0x11
    1e92:	9a 89       	ldd	r25, Y+18	; 0x12
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <Stepper_RotateCW+0x2dc>
    1e98:	9a 8b       	std	Y+18, r25	; 0x12
    1e9a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	9c 8b       	std	Y+20, r25	; 0x14
    1ea4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	69 f7       	brne	.-38     	; 0x1e88 <Stepper_RotateCW+0x2d0>
    1eae:	14 c0       	rjmp	.+40     	; 0x1ed8 <Stepper_RotateCW+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb0:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb2:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb4:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb6:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	9c 8b       	std	Y+20, r25	; 0x14
    1ec2:	8b 8b       	std	Y+19, r24	; 0x13
    1ec4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec8:	98 8b       	std	Y+16, r25	; 0x10
    1eca:	8f 87       	std	Y+15, r24	; 0x0f
    1ecc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ece:	98 89       	ldd	r25, Y+16	; 0x10
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <Stepper_RotateCW+0x318>
    1ed4:	98 8b       	std	Y+16, r25	; 0x10
    1ed6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);

	DIO_enuSetPinValue(Coil_Blue, DIO_u8LOW);
    1ed8:	80 e1       	ldi	r24, 0x10	; 16
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Pink, DIO_u8LOW);
    1ee0:	81 e1       	ldi	r24, 0x11	; 17
    1ee2:	60 e0       	ldi	r22, 0x00	; 0
    1ee4:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Yellow, DIO_u8LOW);
    1ee8:	82 e1       	ldi	r24, 0x12	; 18
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Orange, DIO_u8HIGH);
    1ef0:	83 e1       	ldi	r24, 0x13	; 19
    1ef2:	61 e0       	ldi	r22, 0x01	; 1
    1ef4:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a0 e7       	ldi	r26, 0x70	; 112
    1efe:	b1 e4       	ldi	r27, 0x41	; 65
    1f00:	8b 87       	std	Y+11, r24	; 0x0b
    1f02:	9c 87       	std	Y+12, r25	; 0x0c
    1f04:	ad 87       	std	Y+13, r26	; 0x0d
    1f06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	4a ef       	ldi	r20, 0xFA	; 250
    1f16:	54 e4       	ldi	r21, 0x44	; 68
    1f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	8f 83       	std	Y+7, r24	; 0x07
    1f22:	98 87       	std	Y+8, r25	; 0x08
    1f24:	a9 87       	std	Y+9, r26	; 0x09
    1f26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f28:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2a:	78 85       	ldd	r23, Y+8	; 0x08
    1f2c:	89 85       	ldd	r24, Y+9	; 0x09
    1f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e8       	ldi	r20, 0x80	; 128
    1f36:	5f e3       	ldi	r21, 0x3F	; 63
    1f38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f3c:	88 23       	and	r24, r24
    1f3e:	2c f4       	brge	.+10     	; 0x1f4a <Stepper_RotateCW+0x392>
		__ticks = 1;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9e 83       	std	Y+6, r25	; 0x06
    1f46:	8d 83       	std	Y+5, r24	; 0x05
    1f48:	3f c0       	rjmp	.+126    	; 0x1fc8 <Stepper_RotateCW+0x410>
	else if (__tmp > 65535)
    1f4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4c:	78 85       	ldd	r23, Y+8	; 0x08
    1f4e:	89 85       	ldd	r24, Y+9	; 0x09
    1f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	3f ef       	ldi	r19, 0xFF	; 255
    1f56:	4f e7       	ldi	r20, 0x7F	; 127
    1f58:	57 e4       	ldi	r21, 0x47	; 71
    1f5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f5e:	18 16       	cp	r1, r24
    1f60:	4c f5       	brge	.+82     	; 0x1fb4 <Stepper_RotateCW+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e2       	ldi	r20, 0x20	; 32
    1f70:	51 e4       	ldi	r21, 0x41	; 65
    1f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	bc 01       	movw	r22, r24
    1f7c:	cd 01       	movw	r24, r26
    1f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	9e 83       	std	Y+6, r25	; 0x06
    1f88:	8d 83       	std	Y+5, r24	; 0x05
    1f8a:	0f c0       	rjmp	.+30     	; 0x1faa <Stepper_RotateCW+0x3f2>
    1f8c:	88 ec       	ldi	r24, 0xC8	; 200
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	9c 83       	std	Y+4, r25	; 0x04
    1f92:	8b 83       	std	Y+3, r24	; 0x03
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	9c 81       	ldd	r25, Y+4	; 0x04
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <Stepper_RotateCW+0x3e0>
    1f9c:	9c 83       	std	Y+4, r25	; 0x04
    1f9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	9e 83       	std	Y+6, r25	; 0x06
    1fa8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	9e 81       	ldd	r25, Y+6	; 0x06
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	69 f7       	brne	.-38     	; 0x1f8c <Stepper_RotateCW+0x3d4>
    1fb2:	14 c0       	rjmp	.+40     	; 0x1fdc <Stepper_RotateCW+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb6:	78 85       	ldd	r23, Y+8	; 0x08
    1fb8:	89 85       	ldd	r24, Y+9	; 0x09
    1fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	9e 83       	std	Y+6, r25	; 0x06
    1fc6:	8d 83       	std	Y+5, r24	; 0x05
    1fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fca:	9e 81       	ldd	r25, Y+6	; 0x06
    1fcc:	9a 83       	std	Y+2, r25	; 0x02
    1fce:	89 83       	std	Y+1, r24	; 0x01
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	f1 f7       	brne	.-4      	; 0x1fd4 <Stepper_RotateCW+0x41c>
    1fd8:	9a 83       	std	Y+2, r25	; 0x02
    1fda:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);
}
    1fdc:	e8 96       	adiw	r28, 0x38	; 56
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	de bf       	out	0x3e, r29	; 62
    1fe4:	0f be       	out	0x3f, r0	; 63
    1fe6:	cd bf       	out	0x3d, r28	; 61
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <Stepper_RotateACW>:

void Stepper_RotateACW(void)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	e8 97       	sbiw	r28, 0x38	; 56
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61

	DIO_enuSetPinValue(Coil_Blue, DIO_u8LOW);
    2002:	80 e1       	ldi	r24, 0x10	; 16
    2004:	60 e0       	ldi	r22, 0x00	; 0
    2006:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Pink, DIO_u8LOW);
    200a:	81 e1       	ldi	r24, 0x11	; 17
    200c:	60 e0       	ldi	r22, 0x00	; 0
    200e:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Yellow, DIO_u8LOW);
    2012:	82 e1       	ldi	r24, 0x12	; 18
    2014:	60 e0       	ldi	r22, 0x00	; 0
    2016:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Orange, DIO_u8HIGH);
    201a:	83 e1       	ldi	r24, 0x13	; 19
    201c:	61 e0       	ldi	r22, 0x01	; 1
    201e:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	a0 e7       	ldi	r26, 0x70	; 112
    2028:	b1 e4       	ldi	r27, 0x41	; 65
    202a:	8d ab       	std	Y+53, r24	; 0x35
    202c:	9e ab       	std	Y+54, r25	; 0x36
    202e:	af ab       	std	Y+55, r26	; 0x37
    2030:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2032:	6d a9       	ldd	r22, Y+53	; 0x35
    2034:	7e a9       	ldd	r23, Y+54	; 0x36
    2036:	8f a9       	ldd	r24, Y+55	; 0x37
    2038:	98 ad       	ldd	r25, Y+56	; 0x38
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	4a ef       	ldi	r20, 0xFA	; 250
    2040:	54 e4       	ldi	r21, 0x44	; 68
    2042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	89 ab       	std	Y+49, r24	; 0x31
    204c:	9a ab       	std	Y+50, r25	; 0x32
    204e:	ab ab       	std	Y+51, r26	; 0x33
    2050:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2052:	69 a9       	ldd	r22, Y+49	; 0x31
    2054:	7a a9       	ldd	r23, Y+50	; 0x32
    2056:	8b a9       	ldd	r24, Y+51	; 0x33
    2058:	9c a9       	ldd	r25, Y+52	; 0x34
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e8       	ldi	r20, 0x80	; 128
    2060:	5f e3       	ldi	r21, 0x3F	; 63
    2062:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2066:	88 23       	and	r24, r24
    2068:	2c f4       	brge	.+10     	; 0x2074 <Stepper_RotateACW+0x86>
		__ticks = 1;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	98 ab       	std	Y+48, r25	; 0x30
    2070:	8f a7       	std	Y+47, r24	; 0x2f
    2072:	3f c0       	rjmp	.+126    	; 0x20f2 <Stepper_RotateACW+0x104>
	else if (__tmp > 65535)
    2074:	69 a9       	ldd	r22, Y+49	; 0x31
    2076:	7a a9       	ldd	r23, Y+50	; 0x32
    2078:	8b a9       	ldd	r24, Y+51	; 0x33
    207a:	9c a9       	ldd	r25, Y+52	; 0x34
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	3f ef       	ldi	r19, 0xFF	; 255
    2080:	4f e7       	ldi	r20, 0x7F	; 127
    2082:	57 e4       	ldi	r21, 0x47	; 71
    2084:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2088:	18 16       	cp	r1, r24
    208a:	4c f5       	brge	.+82     	; 0x20de <Stepper_RotateACW+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208c:	6d a9       	ldd	r22, Y+53	; 0x35
    208e:	7e a9       	ldd	r23, Y+54	; 0x36
    2090:	8f a9       	ldd	r24, Y+55	; 0x37
    2092:	98 ad       	ldd	r25, Y+56	; 0x38
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e2       	ldi	r20, 0x20	; 32
    209a:	51 e4       	ldi	r21, 0x41	; 65
    209c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	bc 01       	movw	r22, r24
    20a6:	cd 01       	movw	r24, r26
    20a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	98 ab       	std	Y+48, r25	; 0x30
    20b2:	8f a7       	std	Y+47, r24	; 0x2f
    20b4:	0f c0       	rjmp	.+30     	; 0x20d4 <Stepper_RotateACW+0xe6>
    20b6:	88 ec       	ldi	r24, 0xC8	; 200
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	9e a7       	std	Y+46, r25	; 0x2e
    20bc:	8d a7       	std	Y+45, r24	; 0x2d
    20be:	8d a5       	ldd	r24, Y+45	; 0x2d
    20c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <Stepper_RotateACW+0xd4>
    20c6:	9e a7       	std	Y+46, r25	; 0x2e
    20c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    20cc:	98 a9       	ldd	r25, Y+48	; 0x30
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	98 ab       	std	Y+48, r25	; 0x30
    20d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d6:	98 a9       	ldd	r25, Y+48	; 0x30
    20d8:	00 97       	sbiw	r24, 0x00	; 0
    20da:	69 f7       	brne	.-38     	; 0x20b6 <Stepper_RotateACW+0xc8>
    20dc:	14 c0       	rjmp	.+40     	; 0x2106 <Stepper_RotateACW+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20de:	69 a9       	ldd	r22, Y+49	; 0x31
    20e0:	7a a9       	ldd	r23, Y+50	; 0x32
    20e2:	8b a9       	ldd	r24, Y+51	; 0x33
    20e4:	9c a9       	ldd	r25, Y+52	; 0x34
    20e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	98 ab       	std	Y+48, r25	; 0x30
    20f0:	8f a7       	std	Y+47, r24	; 0x2f
    20f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    20f4:	98 a9       	ldd	r25, Y+48	; 0x30
    20f6:	9c a7       	std	Y+44, r25	; 0x2c
    20f8:	8b a7       	std	Y+43, r24	; 0x2b
    20fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    20fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <Stepper_RotateACW+0x110>
    2102:	9c a7       	std	Y+44, r25	; 0x2c
    2104:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(15);

	DIO_enuSetPinValue(Coil_Blue, DIO_u8LOW);
    2106:	80 e1       	ldi	r24, 0x10	; 16
    2108:	60 e0       	ldi	r22, 0x00	; 0
    210a:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Pink, DIO_u8LOW);
    210e:	81 e1       	ldi	r24, 0x11	; 17
    2110:	60 e0       	ldi	r22, 0x00	; 0
    2112:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Yellow, DIO_u8HIGH);
    2116:	82 e1       	ldi	r24, 0x12	; 18
    2118:	61 e0       	ldi	r22, 0x01	; 1
    211a:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Orange, DIO_u8LOW);
    211e:	83 e1       	ldi	r24, 0x13	; 19
    2120:	60 e0       	ldi	r22, 0x00	; 0
    2122:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	a0 e7       	ldi	r26, 0x70	; 112
    212c:	b1 e4       	ldi	r27, 0x41	; 65
    212e:	8f a3       	std	Y+39, r24	; 0x27
    2130:	98 a7       	std	Y+40, r25	; 0x28
    2132:	a9 a7       	std	Y+41, r26	; 0x29
    2134:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2136:	6f a1       	ldd	r22, Y+39	; 0x27
    2138:	78 a5       	ldd	r23, Y+40	; 0x28
    213a:	89 a5       	ldd	r24, Y+41	; 0x29
    213c:	9a a5       	ldd	r25, Y+42	; 0x2a
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	4a ef       	ldi	r20, 0xFA	; 250
    2144:	54 e4       	ldi	r21, 0x44	; 68
    2146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	8b a3       	std	Y+35, r24	; 0x23
    2150:	9c a3       	std	Y+36, r25	; 0x24
    2152:	ad a3       	std	Y+37, r26	; 0x25
    2154:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2156:	6b a1       	ldd	r22, Y+35	; 0x23
    2158:	7c a1       	ldd	r23, Y+36	; 0x24
    215a:	8d a1       	ldd	r24, Y+37	; 0x25
    215c:	9e a1       	ldd	r25, Y+38	; 0x26
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e8       	ldi	r20, 0x80	; 128
    2164:	5f e3       	ldi	r21, 0x3F	; 63
    2166:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    216a:	88 23       	and	r24, r24
    216c:	2c f4       	brge	.+10     	; 0x2178 <Stepper_RotateACW+0x18a>
		__ticks = 1;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9a a3       	std	Y+34, r25	; 0x22
    2174:	89 a3       	std	Y+33, r24	; 0x21
    2176:	3f c0       	rjmp	.+126    	; 0x21f6 <Stepper_RotateACW+0x208>
	else if (__tmp > 65535)
    2178:	6b a1       	ldd	r22, Y+35	; 0x23
    217a:	7c a1       	ldd	r23, Y+36	; 0x24
    217c:	8d a1       	ldd	r24, Y+37	; 0x25
    217e:	9e a1       	ldd	r25, Y+38	; 0x26
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	3f ef       	ldi	r19, 0xFF	; 255
    2184:	4f e7       	ldi	r20, 0x7F	; 127
    2186:	57 e4       	ldi	r21, 0x47	; 71
    2188:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    218c:	18 16       	cp	r1, r24
    218e:	4c f5       	brge	.+82     	; 0x21e2 <Stepper_RotateACW+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2190:	6f a1       	ldd	r22, Y+39	; 0x27
    2192:	78 a5       	ldd	r23, Y+40	; 0x28
    2194:	89 a5       	ldd	r24, Y+41	; 0x29
    2196:	9a a5       	ldd	r25, Y+42	; 0x2a
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e2       	ldi	r20, 0x20	; 32
    219e:	51 e4       	ldi	r21, 0x41	; 65
    21a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	bc 01       	movw	r22, r24
    21aa:	cd 01       	movw	r24, r26
    21ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	9a a3       	std	Y+34, r25	; 0x22
    21b6:	89 a3       	std	Y+33, r24	; 0x21
    21b8:	0f c0       	rjmp	.+30     	; 0x21d8 <Stepper_RotateACW+0x1ea>
    21ba:	88 ec       	ldi	r24, 0xC8	; 200
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	98 a3       	std	Y+32, r25	; 0x20
    21c0:	8f 8f       	std	Y+31, r24	; 0x1f
    21c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21c4:	98 a1       	ldd	r25, Y+32	; 0x20
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <Stepper_RotateACW+0x1d8>
    21ca:	98 a3       	std	Y+32, r25	; 0x20
    21cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ce:	89 a1       	ldd	r24, Y+33	; 0x21
    21d0:	9a a1       	ldd	r25, Y+34	; 0x22
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	9a a3       	std	Y+34, r25	; 0x22
    21d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d8:	89 a1       	ldd	r24, Y+33	; 0x21
    21da:	9a a1       	ldd	r25, Y+34	; 0x22
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	69 f7       	brne	.-38     	; 0x21ba <Stepper_RotateACW+0x1cc>
    21e0:	14 c0       	rjmp	.+40     	; 0x220a <Stepper_RotateACW+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e2:	6b a1       	ldd	r22, Y+35	; 0x23
    21e4:	7c a1       	ldd	r23, Y+36	; 0x24
    21e6:	8d a1       	ldd	r24, Y+37	; 0x25
    21e8:	9e a1       	ldd	r25, Y+38	; 0x26
    21ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	9a a3       	std	Y+34, r25	; 0x22
    21f4:	89 a3       	std	Y+33, r24	; 0x21
    21f6:	89 a1       	ldd	r24, Y+33	; 0x21
    21f8:	9a a1       	ldd	r25, Y+34	; 0x22
    21fa:	9e 8f       	std	Y+30, r25	; 0x1e
    21fc:	8d 8f       	std	Y+29, r24	; 0x1d
    21fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2200:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	f1 f7       	brne	.-4      	; 0x2202 <Stepper_RotateACW+0x214>
    2206:	9e 8f       	std	Y+30, r25	; 0x1e
    2208:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(15);

	DIO_enuSetPinValue(Coil_Blue, DIO_u8LOW);
    220a:	80 e1       	ldi	r24, 0x10	; 16
    220c:	60 e0       	ldi	r22, 0x00	; 0
    220e:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Pink, DIO_u8HIGH);
    2212:	81 e1       	ldi	r24, 0x11	; 17
    2214:	61 e0       	ldi	r22, 0x01	; 1
    2216:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Yellow, DIO_u8LOW);
    221a:	82 e1       	ldi	r24, 0x12	; 18
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Orange, DIO_u8LOW);
    2222:	83 e1       	ldi	r24, 0x13	; 19
    2224:	60 e0       	ldi	r22, 0x00	; 0
    2226:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	a0 e7       	ldi	r26, 0x70	; 112
    2230:	b1 e4       	ldi	r27, 0x41	; 65
    2232:	89 8f       	std	Y+25, r24	; 0x19
    2234:	9a 8f       	std	Y+26, r25	; 0x1a
    2236:	ab 8f       	std	Y+27, r26	; 0x1b
    2238:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223a:	69 8d       	ldd	r22, Y+25	; 0x19
    223c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    223e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2240:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	4a ef       	ldi	r20, 0xFA	; 250
    2248:	54 e4       	ldi	r21, 0x44	; 68
    224a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	8d 8b       	std	Y+21, r24	; 0x15
    2254:	9e 8b       	std	Y+22, r25	; 0x16
    2256:	af 8b       	std	Y+23, r26	; 0x17
    2258:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    225a:	6d 89       	ldd	r22, Y+21	; 0x15
    225c:	7e 89       	ldd	r23, Y+22	; 0x16
    225e:	8f 89       	ldd	r24, Y+23	; 0x17
    2260:	98 8d       	ldd	r25, Y+24	; 0x18
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e8       	ldi	r20, 0x80	; 128
    2268:	5f e3       	ldi	r21, 0x3F	; 63
    226a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    226e:	88 23       	and	r24, r24
    2270:	2c f4       	brge	.+10     	; 0x227c <Stepper_RotateACW+0x28e>
		__ticks = 1;
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	9c 8b       	std	Y+20, r25	; 0x14
    2278:	8b 8b       	std	Y+19, r24	; 0x13
    227a:	3f c0       	rjmp	.+126    	; 0x22fa <Stepper_RotateACW+0x30c>
	else if (__tmp > 65535)
    227c:	6d 89       	ldd	r22, Y+21	; 0x15
    227e:	7e 89       	ldd	r23, Y+22	; 0x16
    2280:	8f 89       	ldd	r24, Y+23	; 0x17
    2282:	98 8d       	ldd	r25, Y+24	; 0x18
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	3f ef       	ldi	r19, 0xFF	; 255
    2288:	4f e7       	ldi	r20, 0x7F	; 127
    228a:	57 e4       	ldi	r21, 0x47	; 71
    228c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2290:	18 16       	cp	r1, r24
    2292:	4c f5       	brge	.+82     	; 0x22e6 <Stepper_RotateACW+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2294:	69 8d       	ldd	r22, Y+25	; 0x19
    2296:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2298:	8b 8d       	ldd	r24, Y+27	; 0x1b
    229a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 e2       	ldi	r20, 0x20	; 32
    22a2:	51 e4       	ldi	r21, 0x41	; 65
    22a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	bc 01       	movw	r22, r24
    22ae:	cd 01       	movw	r24, r26
    22b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	9c 8b       	std	Y+20, r25	; 0x14
    22ba:	8b 8b       	std	Y+19, r24	; 0x13
    22bc:	0f c0       	rjmp	.+30     	; 0x22dc <Stepper_RotateACW+0x2ee>
    22be:	88 ec       	ldi	r24, 0xC8	; 200
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	9a 8b       	std	Y+18, r25	; 0x12
    22c4:	89 8b       	std	Y+17, r24	; 0x11
    22c6:	89 89       	ldd	r24, Y+17	; 0x11
    22c8:	9a 89       	ldd	r25, Y+18	; 0x12
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	f1 f7       	brne	.-4      	; 0x22ca <Stepper_RotateACW+0x2dc>
    22ce:	9a 8b       	std	Y+18, r25	; 0x12
    22d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d2:	8b 89       	ldd	r24, Y+19	; 0x13
    22d4:	9c 89       	ldd	r25, Y+20	; 0x14
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	9c 8b       	std	Y+20, r25	; 0x14
    22da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22dc:	8b 89       	ldd	r24, Y+19	; 0x13
    22de:	9c 89       	ldd	r25, Y+20	; 0x14
    22e0:	00 97       	sbiw	r24, 0x00	; 0
    22e2:	69 f7       	brne	.-38     	; 0x22be <Stepper_RotateACW+0x2d0>
    22e4:	14 c0       	rjmp	.+40     	; 0x230e <Stepper_RotateACW+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e6:	6d 89       	ldd	r22, Y+21	; 0x15
    22e8:	7e 89       	ldd	r23, Y+22	; 0x16
    22ea:	8f 89       	ldd	r24, Y+23	; 0x17
    22ec:	98 8d       	ldd	r25, Y+24	; 0x18
    22ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	9c 8b       	std	Y+20, r25	; 0x14
    22f8:	8b 8b       	std	Y+19, r24	; 0x13
    22fa:	8b 89       	ldd	r24, Y+19	; 0x13
    22fc:	9c 89       	ldd	r25, Y+20	; 0x14
    22fe:	98 8b       	std	Y+16, r25	; 0x10
    2300:	8f 87       	std	Y+15, r24	; 0x0f
    2302:	8f 85       	ldd	r24, Y+15	; 0x0f
    2304:	98 89       	ldd	r25, Y+16	; 0x10
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <Stepper_RotateACW+0x318>
    230a:	98 8b       	std	Y+16, r25	; 0x10
    230c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);

	DIO_enuSetPinValue(Coil_Blue, DIO_u8HIGH);
    230e:	80 e1       	ldi	r24, 0x10	; 16
    2310:	61 e0       	ldi	r22, 0x01	; 1
    2312:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Pink, DIO_u8LOW);
    2316:	81 e1       	ldi	r24, 0x11	; 17
    2318:	60 e0       	ldi	r22, 0x00	; 0
    231a:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Yellow, DIO_u8LOW);
    231e:	82 e1       	ldi	r24, 0x12	; 18
    2320:	60 e0       	ldi	r22, 0x00	; 0
    2322:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coil_Orange, DIO_u8LOW);
    2326:	83 e1       	ldi	r24, 0x13	; 19
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuSetPinValue>
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	a0 e7       	ldi	r26, 0x70	; 112
    2334:	b1 e4       	ldi	r27, 0x41	; 65
    2336:	8b 87       	std	Y+11, r24	; 0x0b
    2338:	9c 87       	std	Y+12, r25	; 0x0c
    233a:	ad 87       	std	Y+13, r26	; 0x0d
    233c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2340:	7c 85       	ldd	r23, Y+12	; 0x0c
    2342:	8d 85       	ldd	r24, Y+13	; 0x0d
    2344:	9e 85       	ldd	r25, Y+14	; 0x0e
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	4a ef       	ldi	r20, 0xFA	; 250
    234c:	54 e4       	ldi	r21, 0x44	; 68
    234e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	8f 83       	std	Y+7, r24	; 0x07
    2358:	98 87       	std	Y+8, r25	; 0x08
    235a:	a9 87       	std	Y+9, r26	; 0x09
    235c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    235e:	6f 81       	ldd	r22, Y+7	; 0x07
    2360:	78 85       	ldd	r23, Y+8	; 0x08
    2362:	89 85       	ldd	r24, Y+9	; 0x09
    2364:	9a 85       	ldd	r25, Y+10	; 0x0a
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e8       	ldi	r20, 0x80	; 128
    236c:	5f e3       	ldi	r21, 0x3F	; 63
    236e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2372:	88 23       	and	r24, r24
    2374:	2c f4       	brge	.+10     	; 0x2380 <Stepper_RotateACW+0x392>
		__ticks = 1;
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
    237e:	3f c0       	rjmp	.+126    	; 0x23fe <Stepper_RotateACW+0x410>
	else if (__tmp > 65535)
    2380:	6f 81       	ldd	r22, Y+7	; 0x07
    2382:	78 85       	ldd	r23, Y+8	; 0x08
    2384:	89 85       	ldd	r24, Y+9	; 0x09
    2386:	9a 85       	ldd	r25, Y+10	; 0x0a
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	3f ef       	ldi	r19, 0xFF	; 255
    238c:	4f e7       	ldi	r20, 0x7F	; 127
    238e:	57 e4       	ldi	r21, 0x47	; 71
    2390:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2394:	18 16       	cp	r1, r24
    2396:	4c f5       	brge	.+82     	; 0x23ea <Stepper_RotateACW+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2398:	6b 85       	ldd	r22, Y+11	; 0x0b
    239a:	7c 85       	ldd	r23, Y+12	; 0x0c
    239c:	8d 85       	ldd	r24, Y+13	; 0x0d
    239e:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	40 e2       	ldi	r20, 0x20	; 32
    23a6:	51 e4       	ldi	r21, 0x41	; 65
    23a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	bc 01       	movw	r22, r24
    23b2:	cd 01       	movw	r24, r26
    23b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	9e 83       	std	Y+6, r25	; 0x06
    23be:	8d 83       	std	Y+5, r24	; 0x05
    23c0:	0f c0       	rjmp	.+30     	; 0x23e0 <Stepper_RotateACW+0x3f2>
    23c2:	88 ec       	ldi	r24, 0xC8	; 200
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	9c 83       	std	Y+4, r25	; 0x04
    23c8:	8b 83       	std	Y+3, r24	; 0x03
    23ca:	8b 81       	ldd	r24, Y+3	; 0x03
    23cc:	9c 81       	ldd	r25, Y+4	; 0x04
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <Stepper_RotateACW+0x3e0>
    23d2:	9c 83       	std	Y+4, r25	; 0x04
    23d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d6:	8d 81       	ldd	r24, Y+5	; 0x05
    23d8:	9e 81       	ldd	r25, Y+6	; 0x06
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	9e 83       	std	Y+6, r25	; 0x06
    23de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e0:	8d 81       	ldd	r24, Y+5	; 0x05
    23e2:	9e 81       	ldd	r25, Y+6	; 0x06
    23e4:	00 97       	sbiw	r24, 0x00	; 0
    23e6:	69 f7       	brne	.-38     	; 0x23c2 <Stepper_RotateACW+0x3d4>
    23e8:	14 c0       	rjmp	.+40     	; 0x2412 <Stepper_RotateACW+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ea:	6f 81       	ldd	r22, Y+7	; 0x07
    23ec:	78 85       	ldd	r23, Y+8	; 0x08
    23ee:	89 85       	ldd	r24, Y+9	; 0x09
    23f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	9e 83       	std	Y+6, r25	; 0x06
    23fc:	8d 83       	std	Y+5, r24	; 0x05
    23fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2400:	9e 81       	ldd	r25, Y+6	; 0x06
    2402:	9a 83       	std	Y+2, r25	; 0x02
    2404:	89 83       	std	Y+1, r24	; 0x01
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	9a 81       	ldd	r25, Y+2	; 0x02
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	f1 f7       	brne	.-4      	; 0x240a <Stepper_RotateACW+0x41c>
    240e:	9a 83       	std	Y+2, r25	; 0x02
    2410:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);

}
    2412:	e8 96       	adiw	r28, 0x38	; 56
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	cf 91       	pop	r28
    2420:	df 91       	pop	r29
    2422:	08 95       	ret

00002424 <main>:

#define	u8PasswordLength 	4
u8	u8UserInput[u8PasswordLength]	=	{0};
u8	u8Password[u8PasswordLength]	=	{1,2,3,4}	;

int main (void){
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	a0 97       	sbiw	r28, 0x20	; 32
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
	s8 i=0 ,j;
    2438:	18 a2       	std	Y+32, r1	; 0x20
	u8 condition;
	u8 u8PressedLoc;
	DIO_voidInit();
    243a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidInit>
	LCD_voidInit();
    243e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidInit>
	KEY_voidInit();
    2442:	0e 94 3a 07 	call	0xe74	; 0xe74 <KEY_voidInit>
	LCD_voidWriteString("Home Security");
    2446:	80 e6       	ldi	r24, 0x60	; 96
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_voidWriteString>
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	aa ef       	ldi	r26, 0xFA	; 250
    2454:	b4 e4       	ldi	r27, 0x44	; 68
    2456:	89 8f       	std	Y+25, r24	; 0x19
    2458:	9a 8f       	std	Y+26, r25	; 0x1a
    245a:	ab 8f       	std	Y+27, r26	; 0x1b
    245c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245e:	69 8d       	ldd	r22, Y+25	; 0x19
    2460:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2462:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2464:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	4a ef       	ldi	r20, 0xFA	; 250
    246c:	54 e4       	ldi	r21, 0x44	; 68
    246e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	8d 8b       	std	Y+21, r24	; 0x15
    2478:	9e 8b       	std	Y+22, r25	; 0x16
    247a:	af 8b       	std	Y+23, r26	; 0x17
    247c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    247e:	6d 89       	ldd	r22, Y+21	; 0x15
    2480:	7e 89       	ldd	r23, Y+22	; 0x16
    2482:	8f 89       	ldd	r24, Y+23	; 0x17
    2484:	98 8d       	ldd	r25, Y+24	; 0x18
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e8       	ldi	r20, 0x80	; 128
    248c:	5f e3       	ldi	r21, 0x3F	; 63
    248e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2492:	88 23       	and	r24, r24
    2494:	2c f4       	brge	.+10     	; 0x24a0 <main+0x7c>
		__ticks = 1;
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	9c 8b       	std	Y+20, r25	; 0x14
    249c:	8b 8b       	std	Y+19, r24	; 0x13
    249e:	3f c0       	rjmp	.+126    	; 0x251e <main+0xfa>
	else if (__tmp > 65535)
    24a0:	6d 89       	ldd	r22, Y+21	; 0x15
    24a2:	7e 89       	ldd	r23, Y+22	; 0x16
    24a4:	8f 89       	ldd	r24, Y+23	; 0x17
    24a6:	98 8d       	ldd	r25, Y+24	; 0x18
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	3f ef       	ldi	r19, 0xFF	; 255
    24ac:	4f e7       	ldi	r20, 0x7F	; 127
    24ae:	57 e4       	ldi	r21, 0x47	; 71
    24b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24b4:	18 16       	cp	r1, r24
    24b6:	4c f5       	brge	.+82     	; 0x250a <main+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b8:	69 8d       	ldd	r22, Y+25	; 0x19
    24ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e2       	ldi	r20, 0x20	; 32
    24c6:	51 e4       	ldi	r21, 0x41	; 65
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	bc 01       	movw	r22, r24
    24d2:	cd 01       	movw	r24, r26
    24d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	9c 8b       	std	Y+20, r25	; 0x14
    24de:	8b 8b       	std	Y+19, r24	; 0x13
    24e0:	0f c0       	rjmp	.+30     	; 0x2500 <main+0xdc>
    24e2:	88 ec       	ldi	r24, 0xC8	; 200
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	9a 8b       	std	Y+18, r25	; 0x12
    24e8:	89 8b       	std	Y+17, r24	; 0x11
    24ea:	89 89       	ldd	r24, Y+17	; 0x11
    24ec:	9a 89       	ldd	r25, Y+18	; 0x12
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <main+0xca>
    24f2:	9a 8b       	std	Y+18, r25	; 0x12
    24f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f6:	8b 89       	ldd	r24, Y+19	; 0x13
    24f8:	9c 89       	ldd	r25, Y+20	; 0x14
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	9c 8b       	std	Y+20, r25	; 0x14
    24fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2500:	8b 89       	ldd	r24, Y+19	; 0x13
    2502:	9c 89       	ldd	r25, Y+20	; 0x14
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	69 f7       	brne	.-38     	; 0x24e2 <main+0xbe>
    2508:	14 c0       	rjmp	.+40     	; 0x2532 <main+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250a:	6d 89       	ldd	r22, Y+21	; 0x15
    250c:	7e 89       	ldd	r23, Y+22	; 0x16
    250e:	8f 89       	ldd	r24, Y+23	; 0x17
    2510:	98 8d       	ldd	r25, Y+24	; 0x18
    2512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	9c 8b       	std	Y+20, r25	; 0x14
    251c:	8b 8b       	std	Y+19, r24	; 0x13
    251e:	8b 89       	ldd	r24, Y+19	; 0x13
    2520:	9c 89       	ldd	r25, Y+20	; 0x14
    2522:	98 8b       	std	Y+16, r25	; 0x10
    2524:	8f 87       	std	Y+15, r24	; 0x0f
    2526:	8f 85       	ldd	r24, Y+15	; 0x0f
    2528:	98 89       	ldd	r25, Y+16	; 0x10
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	f1 f7       	brne	.-4      	; 0x252a <main+0x106>
    252e:	98 8b       	std	Y+16, r25	; 0x10
    2530:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2000);
	LCD_voidClear();
    2532:	0e 94 4e 0c 	call	0x189c	; 0x189c <LCD_voidClear>
	LCD_voidWriteString("Enter Password:");
    2536:	8e e6       	ldi	r24, 0x6E	; 110
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_voidWriteString>
	LCD_voidGoToXY(2,0);
    253e:	82 e0       	ldi	r24, 0x02	; 2
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <LCD_voidGoToXY>
	LCD_voidSendCmd(0x0F);
    2546:	8f e0       	ldi	r24, 0x0F	; 15
    2548:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <LCD_voidSendCmd>
	while(1){

		u8PressedLoc = GetKey() ;
    254c:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <GetKey>
    2550:	8d 8f       	std	Y+29, r24	; 0x1d

		if(u8PressedLoc == 'C')
    2552:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2554:	83 34       	cpi	r24, 0x43	; 67
    2556:	31 f4       	brne	.+12     	; 0x2564 <main+0x140>
		{
			i=0;
    2558:	18 a2       	std	Y+32, r1	; 0x20
			ClearPasswordField();
    255a:	0e 94 a9 14 	call	0x2952	; 0x2952 <ClearPasswordField>
			ClearInputData();
    255e:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <ClearInputData>
    2562:	f4 cf       	rjmp	.-24     	; 0x254c <main+0x128>
		}
		else if(u8PressedLoc == 'E')
    2564:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2566:	85 34       	cpi	r24, 0x45	; 69
    2568:	a9 f4       	brne	.+42     	; 0x2594 <main+0x170>
		{
			condition =PasswordCheck();
    256a:	0e 94 ba 14 	call	0x2974	; 0x2974 <PasswordCheck>
    256e:	8e 8f       	std	Y+30, r24	; 0x1e

			if(condition == 1 && i<=u8PasswordLength)
    2570:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2572:	81 30       	cpi	r24, 0x01	; 1
    2574:	49 f4       	brne	.+18     	; 0x2588 <main+0x164>
    2576:	88 a1       	ldd	r24, Y+32	; 0x20
    2578:	85 30       	cpi	r24, 0x05	; 5
    257a:	34 f4       	brge	.+12     	; 0x2588 <main+0x164>
			{
				i=0;
    257c:	18 a2       	std	Y+32, r1	; 0x20
				OpenDoor();
    257e:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <OpenDoor>
				ClearInputData();
    2582:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <ClearInputData>
    2586:	e2 cf       	rjmp	.-60     	; 0x254c <main+0x128>
			}
			else
			{
				i=0;
    2588:	18 a2       	std	Y+32, r1	; 0x20
				WrongPassword();
    258a:	0e 94 ed 14 	call	0x29da	; 0x29da <WrongPassword>
				ClearInputData();
    258e:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <ClearInputData>
    2592:	dc cf       	rjmp	.-72     	; 0x254c <main+0x128>
			}
		}
		else if(u8PressedLoc == 'L'){
    2594:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2596:	8c 34       	cpi	r24, 0x4C	; 76
    2598:	29 f4       	brne	.+10     	; 0x25a4 <main+0x180>
			CloseDoor();
    259a:	0e 94 fd 13 	call	0x27fa	; 0x27fa <CloseDoor>
			ClearInputData();
    259e:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <ClearInputData>
    25a2:	d4 cf       	rjmp	.-88     	; 0x254c <main+0x128>
		}
		else if (u8PressedLoc >= 1 && u8PressedLoc <=9 )
    25a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25a6:	88 23       	and	r24, r24
    25a8:	89 f2       	breq	.-94     	; 0x254c <main+0x128>
    25aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25ac:	8a 30       	cpi	r24, 0x0A	; 10
    25ae:	70 f6       	brcc	.-100    	; 0x254c <main+0x128>
		{
			LCD_voidWriteChar(u8PressedLoc +0x30);
    25b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25b2:	80 5d       	subi	r24, 0xD0	; 208
    25b4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <LCD_voidWriteChar>
			u8UserInput[i]=u8PressedLoc;
    25b8:	88 a1       	ldd	r24, Y+32	; 0x20
    25ba:	99 27       	eor	r25, r25
    25bc:	87 fd       	sbrc	r24, 7
    25be:	90 95       	com	r25
    25c0:	fc 01       	movw	r30, r24
    25c2:	e8 51       	subi	r30, 0x18	; 24
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25c8:	80 83       	st	Z, r24
			i++;
    25ca:	88 a1       	ldd	r24, Y+32	; 0x20
    25cc:	8f 5f       	subi	r24, 0xFF	; 255
    25ce:	88 a3       	std	Y+32, r24	; 0x20
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	aa e7       	ldi	r26, 0x7A	; 122
    25d6:	b3 e4       	ldi	r27, 0x43	; 67
    25d8:	8b 87       	std	Y+11, r24	; 0x0b
    25da:	9c 87       	std	Y+12, r25	; 0x0c
    25dc:	ad 87       	std	Y+13, r26	; 0x0d
    25de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	4a ef       	ldi	r20, 0xFA	; 250
    25ee:	54 e4       	ldi	r21, 0x44	; 68
    25f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	8f 83       	std	Y+7, r24	; 0x07
    25fa:	98 87       	std	Y+8, r25	; 0x08
    25fc:	a9 87       	std	Y+9, r26	; 0x09
    25fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2600:	6f 81       	ldd	r22, Y+7	; 0x07
    2602:	78 85       	ldd	r23, Y+8	; 0x08
    2604:	89 85       	ldd	r24, Y+9	; 0x09
    2606:	9a 85       	ldd	r25, Y+10	; 0x0a
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e8       	ldi	r20, 0x80	; 128
    260e:	5f e3       	ldi	r21, 0x3F	; 63
    2610:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2614:	88 23       	and	r24, r24
    2616:	2c f4       	brge	.+10     	; 0x2622 <main+0x1fe>
		__ticks = 1;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9e 83       	std	Y+6, r25	; 0x06
    261e:	8d 83       	std	Y+5, r24	; 0x05
    2620:	3f c0       	rjmp	.+126    	; 0x26a0 <main+0x27c>
	else if (__tmp > 65535)
    2622:	6f 81       	ldd	r22, Y+7	; 0x07
    2624:	78 85       	ldd	r23, Y+8	; 0x08
    2626:	89 85       	ldd	r24, Y+9	; 0x09
    2628:	9a 85       	ldd	r25, Y+10	; 0x0a
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	3f ef       	ldi	r19, 0xFF	; 255
    262e:	4f e7       	ldi	r20, 0x7F	; 127
    2630:	57 e4       	ldi	r21, 0x47	; 71
    2632:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2636:	18 16       	cp	r1, r24
    2638:	4c f5       	brge	.+82     	; 0x268c <main+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263a:	6b 85       	ldd	r22, Y+11	; 0x0b
    263c:	7c 85       	ldd	r23, Y+12	; 0x0c
    263e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2640:	9e 85       	ldd	r25, Y+14	; 0x0e
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e2       	ldi	r20, 0x20	; 32
    2648:	51 e4       	ldi	r21, 0x41	; 65
    264a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	bc 01       	movw	r22, r24
    2654:	cd 01       	movw	r24, r26
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	0f c0       	rjmp	.+30     	; 0x2682 <main+0x25e>
    2664:	88 ec       	ldi	r24, 0xC8	; 200
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	9c 83       	std	Y+4, r25	; 0x04
    266a:	8b 83       	std	Y+3, r24	; 0x03
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	9c 81       	ldd	r25, Y+4	; 0x04
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <main+0x24c>
    2674:	9c 83       	std	Y+4, r25	; 0x04
    2676:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2678:	8d 81       	ldd	r24, Y+5	; 0x05
    267a:	9e 81       	ldd	r25, Y+6	; 0x06
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	9e 83       	std	Y+6, r25	; 0x06
    2680:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2682:	8d 81       	ldd	r24, Y+5	; 0x05
    2684:	9e 81       	ldd	r25, Y+6	; 0x06
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	69 f7       	brne	.-38     	; 0x2664 <main+0x240>
    268a:	60 cf       	rjmp	.-320    	; 0x254c <main+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268c:	6f 81       	ldd	r22, Y+7	; 0x07
    268e:	78 85       	ldd	r23, Y+8	; 0x08
    2690:	89 85       	ldd	r24, Y+9	; 0x09
    2692:	9a 85       	ldd	r25, Y+10	; 0x0a
    2694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	8d 81       	ldd	r24, Y+5	; 0x05
    26a2:	9e 81       	ldd	r25, Y+6	; 0x06
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	9a 81       	ldd	r25, Y+2	; 0x02
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <main+0x288>
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
    26b4:	4b cf       	rjmp	.-362    	; 0x254c <main+0x128>

000026b6 <OpenDoor>:
	_delay_ms(10);

	return 0;
}

void OpenDoor(void){
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	2f 97       	sbiw	r28, 0x0f	; 15
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	cd bf       	out	0x3d, r28	; 61
	s8 i;
	LCD_voidClear();
    26ca:	0e 94 4e 0c 	call	0x189c	; 0x189c <LCD_voidClear>
	LCD_voidWriteString("Welcome Home!");
    26ce:	8e e7       	ldi	r24, 0x7E	; 126
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_voidWriteString>
	LCD_voidGoToXY(2,0);
    26d6:	82 e0       	ldi	r24, 0x02	; 2
    26d8:	60 e0       	ldi	r22, 0x00	; 0
    26da:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <LCD_voidGoToXY>
	LCD_voidWriteString("Unlocking Door...");
    26de:	8c e8       	ldi	r24, 0x8C	; 140
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_voidWriteString>

	for (i=3;i>=0;i--)
    26e6:	83 e0       	ldi	r24, 0x03	; 3
    26e8:	8f 87       	std	Y+15, r24	; 0x0f
    26ea:	7a c0       	rjmp	.+244    	; 0x27e0 <OpenDoor+0x12a>
	{
		SEV_voidDisplayNb(SEV_LEFT,i);
    26ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	69 2f       	mov	r22, r25
    26f2:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <SEV_voidDisplayNb>
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	aa e7       	ldi	r26, 0x7A	; 122
    26fc:	b4 e4       	ldi	r27, 0x44	; 68
    26fe:	8b 87       	std	Y+11, r24	; 0x0b
    2700:	9c 87       	std	Y+12, r25	; 0x0c
    2702:	ad 87       	std	Y+13, r26	; 0x0d
    2704:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2706:	6b 85       	ldd	r22, Y+11	; 0x0b
    2708:	7c 85       	ldd	r23, Y+12	; 0x0c
    270a:	8d 85       	ldd	r24, Y+13	; 0x0d
    270c:	9e 85       	ldd	r25, Y+14	; 0x0e
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	4a ef       	ldi	r20, 0xFA	; 250
    2714:	54 e4       	ldi	r21, 0x44	; 68
    2716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	8f 83       	std	Y+7, r24	; 0x07
    2720:	98 87       	std	Y+8, r25	; 0x08
    2722:	a9 87       	std	Y+9, r26	; 0x09
    2724:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2726:	6f 81       	ldd	r22, Y+7	; 0x07
    2728:	78 85       	ldd	r23, Y+8	; 0x08
    272a:	89 85       	ldd	r24, Y+9	; 0x09
    272c:	9a 85       	ldd	r25, Y+10	; 0x0a
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e8       	ldi	r20, 0x80	; 128
    2734:	5f e3       	ldi	r21, 0x3F	; 63
    2736:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    273a:	88 23       	and	r24, r24
    273c:	2c f4       	brge	.+10     	; 0x2748 <OpenDoor+0x92>
		__ticks = 1;
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	9e 83       	std	Y+6, r25	; 0x06
    2744:	8d 83       	std	Y+5, r24	; 0x05
    2746:	3f c0       	rjmp	.+126    	; 0x27c6 <OpenDoor+0x110>
	else if (__tmp > 65535)
    2748:	6f 81       	ldd	r22, Y+7	; 0x07
    274a:	78 85       	ldd	r23, Y+8	; 0x08
    274c:	89 85       	ldd	r24, Y+9	; 0x09
    274e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	3f ef       	ldi	r19, 0xFF	; 255
    2754:	4f e7       	ldi	r20, 0x7F	; 127
    2756:	57 e4       	ldi	r21, 0x47	; 71
    2758:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    275c:	18 16       	cp	r1, r24
    275e:	4c f5       	brge	.+82     	; 0x27b2 <OpenDoor+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2760:	6b 85       	ldd	r22, Y+11	; 0x0b
    2762:	7c 85       	ldd	r23, Y+12	; 0x0c
    2764:	8d 85       	ldd	r24, Y+13	; 0x0d
    2766:	9e 85       	ldd	r25, Y+14	; 0x0e
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e2       	ldi	r20, 0x20	; 32
    276e:	51 e4       	ldi	r21, 0x41	; 65
    2770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	bc 01       	movw	r22, r24
    277a:	cd 01       	movw	r24, r26
    277c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	9e 83       	std	Y+6, r25	; 0x06
    2786:	8d 83       	std	Y+5, r24	; 0x05
    2788:	0f c0       	rjmp	.+30     	; 0x27a8 <OpenDoor+0xf2>
    278a:	88 ec       	ldi	r24, 0xC8	; 200
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	9c 83       	std	Y+4, r25	; 0x04
    2790:	8b 83       	std	Y+3, r24	; 0x03
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	9c 81       	ldd	r25, Y+4	; 0x04
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	f1 f7       	brne	.-4      	; 0x2796 <OpenDoor+0xe0>
    279a:	9c 83       	std	Y+4, r25	; 0x04
    279c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279e:	8d 81       	ldd	r24, Y+5	; 0x05
    27a0:	9e 81       	ldd	r25, Y+6	; 0x06
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	9e 83       	std	Y+6, r25	; 0x06
    27a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a8:	8d 81       	ldd	r24, Y+5	; 0x05
    27aa:	9e 81       	ldd	r25, Y+6	; 0x06
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	69 f7       	brne	.-38     	; 0x278a <OpenDoor+0xd4>
    27b0:	14 c0       	rjmp	.+40     	; 0x27da <OpenDoor+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b2:	6f 81       	ldd	r22, Y+7	; 0x07
    27b4:	78 85       	ldd	r23, Y+8	; 0x08
    27b6:	89 85       	ldd	r24, Y+9	; 0x09
    27b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	9e 83       	std	Y+6, r25	; 0x06
    27c4:	8d 83       	std	Y+5, r24	; 0x05
    27c6:	8d 81       	ldd	r24, Y+5	; 0x05
    27c8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ca:	9a 83       	std	Y+2, r25	; 0x02
    27cc:	89 83       	std	Y+1, r24	; 0x01
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	9a 81       	ldd	r25, Y+2	; 0x02
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	f1 f7       	brne	.-4      	; 0x27d2 <OpenDoor+0x11c>
    27d6:	9a 83       	std	Y+2, r25	; 0x02
    27d8:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidClear();
	LCD_voidWriteString("Welcome Home!");
	LCD_voidGoToXY(2,0);
	LCD_voidWriteString("Unlocking Door...");

	for (i=3;i>=0;i--)
    27da:	8f 85       	ldd	r24, Y+15	; 0x0f
    27dc:	81 50       	subi	r24, 0x01	; 1
    27de:	8f 87       	std	Y+15, r24	; 0x0f
    27e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27e2:	88 23       	and	r24, r24
    27e4:	0c f0       	brlt	.+2      	; 0x27e8 <OpenDoor+0x132>
    27e6:	82 cf       	rjmp	.-252    	; 0x26ec <OpenDoor+0x36>
		SEV_voidDisplayNb(SEV_LEFT,i);
		_delay_ms(1000);
	}
	/*for (i=0;i<=63;i++){
			Stepper_RotateCW();*/
}
    27e8:	2f 96       	adiw	r28, 0x0f	; 15
    27ea:	0f b6       	in	r0, 0x3f	; 63
    27ec:	f8 94       	cli
    27ee:	de bf       	out	0x3e, r29	; 62
    27f0:	0f be       	out	0x3f, r0	; 63
    27f2:	cd bf       	out	0x3d, r28	; 61
    27f4:	cf 91       	pop	r28
    27f6:	df 91       	pop	r29
    27f8:	08 95       	ret

000027fa <CloseDoor>:
void CloseDoor(void){
    27fa:	df 93       	push	r29
    27fc:	cf 93       	push	r28
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	2f 97       	sbiw	r28, 0x0f	; 15
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61
	s8 i;
	LCD_voidClear();
    280e:	0e 94 4e 0c 	call	0x189c	; 0x189c <LCD_voidClear>
	LCD_voidWriteString("GoodBye!");
    2812:	8e e9       	ldi	r24, 0x9E	; 158
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_voidWriteString>
	LCD_voidGoToXY(2,0);
    281a:	82 e0       	ldi	r24, 0x02	; 2
    281c:	60 e0       	ldi	r22, 0x00	; 0
    281e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <LCD_voidGoToXY>
	LCD_voidWriteString("Locking Door...");
    2822:	87 ea       	ldi	r24, 0xA7	; 167
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_voidWriteString>

	for (i=3;i>=0;i--)
    282a:	83 e0       	ldi	r24, 0x03	; 3
    282c:	8f 87       	std	Y+15, r24	; 0x0f
    282e:	7a c0       	rjmp	.+244    	; 0x2924 <CloseDoor+0x12a>
	{
		SEV_voidDisplayNb(SEV_LEFT,i);
    2830:	9f 85       	ldd	r25, Y+15	; 0x0f
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	69 2f       	mov	r22, r25
    2836:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <SEV_voidDisplayNb>
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	aa e7       	ldi	r26, 0x7A	; 122
    2840:	b4 e4       	ldi	r27, 0x44	; 68
    2842:	8b 87       	std	Y+11, r24	; 0x0b
    2844:	9c 87       	std	Y+12, r25	; 0x0c
    2846:	ad 87       	std	Y+13, r26	; 0x0d
    2848:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284a:	6b 85       	ldd	r22, Y+11	; 0x0b
    284c:	7c 85       	ldd	r23, Y+12	; 0x0c
    284e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2850:	9e 85       	ldd	r25, Y+14	; 0x0e
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	4a ef       	ldi	r20, 0xFA	; 250
    2858:	54 e4       	ldi	r21, 0x44	; 68
    285a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	8f 83       	std	Y+7, r24	; 0x07
    2864:	98 87       	std	Y+8, r25	; 0x08
    2866:	a9 87       	std	Y+9, r26	; 0x09
    2868:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    286a:	6f 81       	ldd	r22, Y+7	; 0x07
    286c:	78 85       	ldd	r23, Y+8	; 0x08
    286e:	89 85       	ldd	r24, Y+9	; 0x09
    2870:	9a 85       	ldd	r25, Y+10	; 0x0a
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e8       	ldi	r20, 0x80	; 128
    2878:	5f e3       	ldi	r21, 0x3F	; 63
    287a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    287e:	88 23       	and	r24, r24
    2880:	2c f4       	brge	.+10     	; 0x288c <CloseDoor+0x92>
		__ticks = 1;
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	9e 83       	std	Y+6, r25	; 0x06
    2888:	8d 83       	std	Y+5, r24	; 0x05
    288a:	3f c0       	rjmp	.+126    	; 0x290a <CloseDoor+0x110>
	else if (__tmp > 65535)
    288c:	6f 81       	ldd	r22, Y+7	; 0x07
    288e:	78 85       	ldd	r23, Y+8	; 0x08
    2890:	89 85       	ldd	r24, Y+9	; 0x09
    2892:	9a 85       	ldd	r25, Y+10	; 0x0a
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	3f ef       	ldi	r19, 0xFF	; 255
    2898:	4f e7       	ldi	r20, 0x7F	; 127
    289a:	57 e4       	ldi	r21, 0x47	; 71
    289c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28a0:	18 16       	cp	r1, r24
    28a2:	4c f5       	brge	.+82     	; 0x28f6 <CloseDoor+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e2       	ldi	r20, 0x20	; 32
    28b2:	51 e4       	ldi	r21, 0x41	; 65
    28b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	bc 01       	movw	r22, r24
    28be:	cd 01       	movw	r24, r26
    28c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	9e 83       	std	Y+6, r25	; 0x06
    28ca:	8d 83       	std	Y+5, r24	; 0x05
    28cc:	0f c0       	rjmp	.+30     	; 0x28ec <CloseDoor+0xf2>
    28ce:	88 ec       	ldi	r24, 0xC8	; 200
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	9c 83       	std	Y+4, r25	; 0x04
    28d4:	8b 83       	std	Y+3, r24	; 0x03
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	9c 81       	ldd	r25, Y+4	; 0x04
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	f1 f7       	brne	.-4      	; 0x28da <CloseDoor+0xe0>
    28de:	9c 83       	std	Y+4, r25	; 0x04
    28e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e2:	8d 81       	ldd	r24, Y+5	; 0x05
    28e4:	9e 81       	ldd	r25, Y+6	; 0x06
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	9e 83       	std	Y+6, r25	; 0x06
    28ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ec:	8d 81       	ldd	r24, Y+5	; 0x05
    28ee:	9e 81       	ldd	r25, Y+6	; 0x06
    28f0:	00 97       	sbiw	r24, 0x00	; 0
    28f2:	69 f7       	brne	.-38     	; 0x28ce <CloseDoor+0xd4>
    28f4:	14 c0       	rjmp	.+40     	; 0x291e <CloseDoor+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f6:	6f 81       	ldd	r22, Y+7	; 0x07
    28f8:	78 85       	ldd	r23, Y+8	; 0x08
    28fa:	89 85       	ldd	r24, Y+9	; 0x09
    28fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	9e 83       	std	Y+6, r25	; 0x06
    2908:	8d 83       	std	Y+5, r24	; 0x05
    290a:	8d 81       	ldd	r24, Y+5	; 0x05
    290c:	9e 81       	ldd	r25, Y+6	; 0x06
    290e:	9a 83       	std	Y+2, r25	; 0x02
    2910:	89 83       	std	Y+1, r24	; 0x01
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	9a 81       	ldd	r25, Y+2	; 0x02
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <CloseDoor+0x11c>
    291a:	9a 83       	std	Y+2, r25	; 0x02
    291c:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidClear();
	LCD_voidWriteString("GoodBye!");
	LCD_voidGoToXY(2,0);
	LCD_voidWriteString("Locking Door...");

	for (i=3;i>=0;i--)
    291e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2920:	81 50       	subi	r24, 0x01	; 1
    2922:	8f 87       	std	Y+15, r24	; 0x0f
    2924:	8f 85       	ldd	r24, Y+15	; 0x0f
    2926:	88 23       	and	r24, r24
    2928:	0c f0       	brlt	.+2      	; 0x292c <CloseDoor+0x132>
    292a:	82 cf       	rjmp	.-252    	; 0x2830 <CloseDoor+0x36>
		SEV_voidDisplayNb(SEV_LEFT,i);
		_delay_ms(1000);
	}
	/*for (i=0;i<=63;i++){
				Stepper_RotateACW();*/
	LCD_voidClear();
    292c:	0e 94 4e 0c 	call	0x189c	; 0x189c <LCD_voidClear>
	LCD_voidWriteString("Enter Password:");
    2930:	8e e6       	ldi	r24, 0x6E	; 110
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_voidWriteString>
	LCD_voidGoToXY(2,0);
    2938:	82 e0       	ldi	r24, 0x02	; 2
    293a:	60 e0       	ldi	r22, 0x00	; 0
    293c:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <LCD_voidGoToXY>
}
    2940:	2f 96       	adiw	r28, 0x0f	; 15
    2942:	0f b6       	in	r0, 0x3f	; 63
    2944:	f8 94       	cli
    2946:	de bf       	out	0x3e, r29	; 62
    2948:	0f be       	out	0x3f, r0	; 63
    294a:	cd bf       	out	0x3d, r28	; 61
    294c:	cf 91       	pop	r28
    294e:	df 91       	pop	r29
    2950:	08 95       	ret

00002952 <ClearPasswordField>:

void ClearPasswordField(void){
    2952:	df 93       	push	r29
    2954:	cf 93       	push	r28
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
	LCD_voidClear();
    295a:	0e 94 4e 0c 	call	0x189c	; 0x189c <LCD_voidClear>
	LCD_voidWriteString("Enter Password:");
    295e:	8e e6       	ldi	r24, 0x6E	; 110
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_voidWriteString>
	LCD_voidGoToXY(2,0);
    2966:	82 e0       	ldi	r24, 0x02	; 2
    2968:	60 e0       	ldi	r22, 0x00	; 0
    296a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <LCD_voidGoToXY>
}
    296e:	cf 91       	pop	r28
    2970:	df 91       	pop	r29
    2972:	08 95       	ret

00002974 <PasswordCheck>:

u8 PasswordCheck(void){
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	00 d0       	rcall	.+0      	; 0x297a <PasswordCheck+0x6>
    297a:	0f 92       	push	r0
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
	u8 PasswordCondition=0;
    2980:	1a 82       	std	Y+2, r1	; 0x02
	s8 i	=	0;
    2982:	19 82       	std	Y+1, r1	; 0x01

	/*Comparing Password*/
	for(i=0; i<u8PasswordLength;i++)
    2984:	19 82       	std	Y+1, r1	; 0x01
    2986:	1d c0       	rjmp	.+58     	; 0x29c2 <PasswordCheck+0x4e>
	{
		if(u8UserInput[i]!=u8Password[i])
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	99 27       	eor	r25, r25
    298c:	87 fd       	sbrc	r24, 7
    298e:	90 95       	com	r25
    2990:	fc 01       	movw	r30, r24
    2992:	e8 51       	subi	r30, 0x18	; 24
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	20 81       	ld	r18, Z
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	99 27       	eor	r25, r25
    299c:	87 fd       	sbrc	r24, 7
    299e:	90 95       	com	r25
    29a0:	fc 01       	movw	r30, r24
    29a2:	e6 52       	subi	r30, 0x26	; 38
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	80 81       	ld	r24, Z
    29a8:	28 17       	cp	r18, r24
    29aa:	31 f0       	breq	.+12     	; 0x29b8 <PasswordCheck+0x44>
		{
			WrongPassword();
    29ac:	0e 94 ed 14 	call	0x29da	; 0x29da <WrongPassword>
			PasswordCondition =	0;
    29b0:	1a 82       	std	Y+2, r1	; 0x02
			return PasswordCondition;
    29b2:	8a 81       	ldd	r24, Y+2	; 0x02
    29b4:	8b 83       	std	Y+3, r24	; 0x03
    29b6:	0a c0       	rjmp	.+20     	; 0x29cc <PasswordCheck+0x58>
		}else{
			PasswordCondition = 1;
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	8a 83       	std	Y+2, r24	; 0x02
u8 PasswordCheck(void){
	u8 PasswordCondition=0;
	s8 i	=	0;

	/*Comparing Password*/
	for(i=0; i<u8PasswordLength;i++)
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	8f 5f       	subi	r24, 0xFF	; 255
    29c0:	89 83       	std	Y+1, r24	; 0x01
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
    29c4:	84 30       	cpi	r24, 0x04	; 4
    29c6:	04 f3       	brlt	.-64     	; 0x2988 <PasswordCheck+0x14>
			return PasswordCondition;
		}else{
			PasswordCondition = 1;
		}
	}
	return PasswordCondition;
    29c8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ca:	8b 83       	std	Y+3, r24	; 0x03
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	08 95       	ret

000029da <WrongPassword>:

void WrongPassword(void){
    29da:	df 93       	push	r29
    29dc:	cf 93       	push	r28
    29de:	cd b7       	in	r28, 0x3d	; 61
    29e0:	de b7       	in	r29, 0x3e	; 62
    29e2:	2e 97       	sbiw	r28, 0x0e	; 14
    29e4:	0f b6       	in	r0, 0x3f	; 63
    29e6:	f8 94       	cli
    29e8:	de bf       	out	0x3e, r29	; 62
    29ea:	0f be       	out	0x3f, r0	; 63
    29ec:	cd bf       	out	0x3d, r28	; 61
	LCD_voidClear();
    29ee:	0e 94 4e 0c 	call	0x189c	; 0x189c <LCD_voidClear>
	LCD_voidWriteString("Wrong Password!");
    29f2:	87 eb       	ldi	r24, 0xB7	; 183
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_voidWriteString>
	LCD_voidGoToXY(2,0);
    29fa:	82 e0       	ldi	r24, 0x02	; 2
    29fc:	60 e0       	ldi	r22, 0x00	; 0
    29fe:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <LCD_voidGoToXY>
	//_delay_ms(1000);
	LCD_voidWriteString("Try again!");
    2a02:	87 ec       	ldi	r24, 0xC7	; 199
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_voidWriteString>
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	aa e7       	ldi	r26, 0x7A	; 122
    2a10:	b4 e4       	ldi	r27, 0x44	; 68
    2a12:	8b 87       	std	Y+11, r24	; 0x0b
    2a14:	9c 87       	std	Y+12, r25	; 0x0c
    2a16:	ad 87       	std	Y+13, r26	; 0x0d
    2a18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	4a ef       	ldi	r20, 0xFA	; 250
    2a28:	54 e4       	ldi	r21, 0x44	; 68
    2a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	8f 83       	std	Y+7, r24	; 0x07
    2a34:	98 87       	std	Y+8, r25	; 0x08
    2a36:	a9 87       	std	Y+9, r26	; 0x09
    2a38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a3c:	78 85       	ldd	r23, Y+8	; 0x08
    2a3e:	89 85       	ldd	r24, Y+9	; 0x09
    2a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	40 e8       	ldi	r20, 0x80	; 128
    2a48:	5f e3       	ldi	r21, 0x3F	; 63
    2a4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a4e:	88 23       	and	r24, r24
    2a50:	2c f4       	brge	.+10     	; 0x2a5c <WrongPassword+0x82>
		__ticks = 1;
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	9e 83       	std	Y+6, r25	; 0x06
    2a58:	8d 83       	std	Y+5, r24	; 0x05
    2a5a:	3f c0       	rjmp	.+126    	; 0x2ada <WrongPassword+0x100>
	else if (__tmp > 65535)
    2a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a5e:	78 85       	ldd	r23, Y+8	; 0x08
    2a60:	89 85       	ldd	r24, Y+9	; 0x09
    2a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	3f ef       	ldi	r19, 0xFF	; 255
    2a68:	4f e7       	ldi	r20, 0x7F	; 127
    2a6a:	57 e4       	ldi	r21, 0x47	; 71
    2a6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a70:	18 16       	cp	r1, r24
    2a72:	4c f5       	brge	.+82     	; 0x2ac6 <WrongPassword+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	40 e2       	ldi	r20, 0x20	; 32
    2a82:	51 e4       	ldi	r21, 0x41	; 65
    2a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	bc 01       	movw	r22, r24
    2a8e:	cd 01       	movw	r24, r26
    2a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	9e 83       	std	Y+6, r25	; 0x06
    2a9a:	8d 83       	std	Y+5, r24	; 0x05
    2a9c:	0f c0       	rjmp	.+30     	; 0x2abc <WrongPassword+0xe2>
    2a9e:	88 ec       	ldi	r24, 0xC8	; 200
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	9c 83       	std	Y+4, r25	; 0x04
    2aa4:	8b 83       	std	Y+3, r24	; 0x03
    2aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	f1 f7       	brne	.-4      	; 0x2aaa <WrongPassword+0xd0>
    2aae:	9c 83       	std	Y+4, r25	; 0x04
    2ab0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	9e 83       	std	Y+6, r25	; 0x06
    2aba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2abc:	8d 81       	ldd	r24, Y+5	; 0x05
    2abe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac0:	00 97       	sbiw	r24, 0x00	; 0
    2ac2:	69 f7       	brne	.-38     	; 0x2a9e <WrongPassword+0xc4>
    2ac4:	14 c0       	rjmp	.+40     	; 0x2aee <WrongPassword+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac8:	78 85       	ldd	r23, Y+8	; 0x08
    2aca:	89 85       	ldd	r24, Y+9	; 0x09
    2acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	9e 83       	std	Y+6, r25	; 0x06
    2ad8:	8d 83       	std	Y+5, r24	; 0x05
    2ada:	8d 81       	ldd	r24, Y+5	; 0x05
    2adc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ade:	9a 83       	std	Y+2, r25	; 0x02
    2ae0:	89 83       	std	Y+1, r24	; 0x01
    2ae2:	89 81       	ldd	r24, Y+1	; 0x01
    2ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	f1 f7       	brne	.-4      	; 0x2ae6 <WrongPassword+0x10c>
    2aea:	9a 83       	std	Y+2, r25	; 0x02
    2aec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_voidClear();
    2aee:	0e 94 4e 0c 	call	0x189c	; 0x189c <LCD_voidClear>
	LCD_voidWriteString("Enter Password:");
    2af2:	8e e6       	ldi	r24, 0x6E	; 110
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_voidWriteString>
	LCD_voidGoToXY(2,0);
    2afa:	82 e0       	ldi	r24, 0x02	; 2
    2afc:	60 e0       	ldi	r22, 0x00	; 0
    2afe:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <LCD_voidGoToXY>
}
    2b02:	2e 96       	adiw	r28, 0x0e	; 14
    2b04:	0f b6       	in	r0, 0x3f	; 63
    2b06:	f8 94       	cli
    2b08:	de bf       	out	0x3e, r29	; 62
    2b0a:	0f be       	out	0x3f, r0	; 63
    2b0c:	cd bf       	out	0x3d, r28	; 61
    2b0e:	cf 91       	pop	r28
    2b10:	df 91       	pop	r29
    2b12:	08 95       	ret

00002b14 <GetKey>:

u8 GetKey(void){
    2b14:	df 93       	push	r29
    2b16:	cf 93       	push	r28
    2b18:	0f 92       	push	r0
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
	u8 u8PressedLoc;
	while ((u8PressedLoc = KEY_u8GetPressedKey())	== 0xFF);
    2b1e:	0e 94 51 07 	call	0xea2	; 0xea2 <KEY_u8GetPressedKey>
    2b22:	89 83       	std	Y+1, r24	; 0x01
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	8f 3f       	cpi	r24, 0xFF	; 255
    2b28:	d1 f3       	breq	.-12     	; 0x2b1e <GetKey+0xa>
	return u8PressedLoc;
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b2c:	0f 90       	pop	r0
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	08 95       	ret

00002b34 <ClearInputData>:

void ClearInputData(void){
    2b34:	df 93       	push	r29
    2b36:	cf 93       	push	r28
    2b38:	0f 92       	push	r0
    2b3a:	cd b7       	in	r28, 0x3d	; 61
    2b3c:	de b7       	in	r29, 0x3e	; 62
	 s8 i;
	for(i=0;i<u8PasswordLength;i++)
    2b3e:	19 82       	std	Y+1, r1	; 0x01
    2b40:	0b c0       	rjmp	.+22     	; 0x2b58 <ClearInputData+0x24>
	{
		u8UserInput[i] = 0;
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	99 27       	eor	r25, r25
    2b46:	87 fd       	sbrc	r24, 7
    2b48:	90 95       	com	r25
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	e8 51       	subi	r30, 0x18	; 24
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	10 82       	st	Z, r1
	return u8PressedLoc;
}

void ClearInputData(void){
	 s8 i;
	for(i=0;i<u8PasswordLength;i++)
    2b52:	89 81       	ldd	r24, Y+1	; 0x01
    2b54:	8f 5f       	subi	r24, 0xFF	; 255
    2b56:	89 83       	std	Y+1, r24	; 0x01
    2b58:	89 81       	ldd	r24, Y+1	; 0x01
    2b5a:	84 30       	cpi	r24, 0x04	; 4
    2b5c:	94 f3       	brlt	.-28     	; 0x2b42 <ClearInputData+0xe>
	{
		u8UserInput[i] = 0;
	}
}
    2b5e:	0f 90       	pop	r0
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	08 95       	ret

00002b66 <__prologue_saves__>:
    2b66:	2f 92       	push	r2
    2b68:	3f 92       	push	r3
    2b6a:	4f 92       	push	r4
    2b6c:	5f 92       	push	r5
    2b6e:	6f 92       	push	r6
    2b70:	7f 92       	push	r7
    2b72:	8f 92       	push	r8
    2b74:	9f 92       	push	r9
    2b76:	af 92       	push	r10
    2b78:	bf 92       	push	r11
    2b7a:	cf 92       	push	r12
    2b7c:	df 92       	push	r13
    2b7e:	ef 92       	push	r14
    2b80:	ff 92       	push	r15
    2b82:	0f 93       	push	r16
    2b84:	1f 93       	push	r17
    2b86:	cf 93       	push	r28
    2b88:	df 93       	push	r29
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
    2b8e:	ca 1b       	sub	r28, r26
    2b90:	db 0b       	sbc	r29, r27
    2b92:	0f b6       	in	r0, 0x3f	; 63
    2b94:	f8 94       	cli
    2b96:	de bf       	out	0x3e, r29	; 62
    2b98:	0f be       	out	0x3f, r0	; 63
    2b9a:	cd bf       	out	0x3d, r28	; 61
    2b9c:	09 94       	ijmp

00002b9e <__epilogue_restores__>:
    2b9e:	2a 88       	ldd	r2, Y+18	; 0x12
    2ba0:	39 88       	ldd	r3, Y+17	; 0x11
    2ba2:	48 88       	ldd	r4, Y+16	; 0x10
    2ba4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ba6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ba8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2baa:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bac:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bae:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bb0:	b9 84       	ldd	r11, Y+9	; 0x09
    2bb2:	c8 84       	ldd	r12, Y+8	; 0x08
    2bb4:	df 80       	ldd	r13, Y+7	; 0x07
    2bb6:	ee 80       	ldd	r14, Y+6	; 0x06
    2bb8:	fd 80       	ldd	r15, Y+5	; 0x05
    2bba:	0c 81       	ldd	r16, Y+4	; 0x04
    2bbc:	1b 81       	ldd	r17, Y+3	; 0x03
    2bbe:	aa 81       	ldd	r26, Y+2	; 0x02
    2bc0:	b9 81       	ldd	r27, Y+1	; 0x01
    2bc2:	ce 0f       	add	r28, r30
    2bc4:	d1 1d       	adc	r29, r1
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	f8 94       	cli
    2bca:	de bf       	out	0x3e, r29	; 62
    2bcc:	0f be       	out	0x3f, r0	; 63
    2bce:	cd bf       	out	0x3d, r28	; 61
    2bd0:	ed 01       	movw	r28, r26
    2bd2:	08 95       	ret

00002bd4 <_exit>:
    2bd4:	f8 94       	cli

00002bd6 <__stop_program>:
    2bd6:	ff cf       	rjmp	.-2      	; 0x2bd6 <__stop_program>
